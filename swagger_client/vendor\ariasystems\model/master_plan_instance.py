# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.vendor\ariasystems\model.coupon_cd import CouponCd  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.master_plan_plan_inst_field import MasterPlanPlanInstField  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.supp_plan import SuppPlan  # noqa: F401,E501


class MasterPlanInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master_plan_instance_id': 'str',
        'client_master_plan_instance_id': 'str',
        'client_master_plan_id': 'str',
        'master_plan_no': 'str',
        'master_plan_instance_description': 'str',
        'dunning_group_no': 'int',
        'client_dunning_group_id': 'str',
        'dunning_group_name': 'str',
        'dunning_group_description': 'str',
        'dunning_process_no': 'int',
        'client_dunning_process_id': 'str',
        'po_num': 'str',
        'supp_plans': 'list[SuppPlan]',
        'coupon_cd': 'list[CouponCd]',
        'master_plan_plan_inst_fields': 'list[MasterPlanPlanInstField]',
        'bill_lag_days': 'int'
    }

    attribute_map = {
        'master_plan_instance_id': 'master_plan_instance_id',
        'client_master_plan_instance_id': 'client_master_plan_instance_id',
        'client_master_plan_id': 'client_master_plan_id',
        'master_plan_no': 'master_plan_no',
        'master_plan_instance_description': 'master_plan_instance_description',
        'dunning_group_no': 'dunning_group_no',
        'client_dunning_group_id': 'client_dunning_group_id',
        'dunning_group_name': 'dunning_group_name',
        'dunning_group_description': 'dunning_group_description',
        'dunning_process_no': 'dunning_process_no',
        'client_dunning_process_id': 'client_dunning_process_id',
        'po_num': 'po_num',
        'supp_plans': 'supp_plans',
        'coupon_cd': 'coupon_cd',
        'master_plan_plan_inst_fields': 'master_plan_plan_inst_fields',
        'bill_lag_days': 'bill_lag_days'
    }

    def __init__(self, master_plan_instance_id=None, client_master_plan_instance_id=None, client_master_plan_id=None, master_plan_no=None, master_plan_instance_description=None, dunning_group_no=None, client_dunning_group_id=None, dunning_group_name=None, dunning_group_description=None, dunning_process_no=None, client_dunning_process_id=None, po_num=None, supp_plans=None, coupon_cd=None, master_plan_plan_inst_fields=None, bill_lag_days=None):  # noqa: E501
        """MasterPlanInstance - a model defined in Swagger"""  # noqa: E501

        self._master_plan_instance_id = None
        self._client_master_plan_instance_id = None
        self._client_master_plan_id = None
        self._master_plan_no = None
        self._master_plan_instance_description = None
        self._dunning_group_no = None
        self._client_dunning_group_id = None
        self._dunning_group_name = None
        self._dunning_group_description = None
        self._dunning_process_no = None
        self._client_dunning_process_id = None
        self._po_num = None
        self._supp_plans = None
        self._coupon_cd = None
        self._master_plan_plan_inst_fields = None
        self._bill_lag_days = None
        self.discriminator = None

        if master_plan_instance_id is not None:
            self.master_plan_instance_id = master_plan_instance_id
        if client_master_plan_instance_id is not None:
            self.client_master_plan_instance_id = client_master_plan_instance_id
        if client_master_plan_id is not None:
            self.client_master_plan_id = client_master_plan_id
        if master_plan_no is not None:
            self.master_plan_no = master_plan_no
        if master_plan_instance_description is not None:
            self.master_plan_instance_description = master_plan_instance_description
        if dunning_group_no is not None:
            self.dunning_group_no = dunning_group_no
        if client_dunning_group_id is not None:
            self.client_dunning_group_id = client_dunning_group_id
        if dunning_group_name is not None:
            self.dunning_group_name = dunning_group_name
        if dunning_group_description is not None:
            self.dunning_group_description = dunning_group_description
        if dunning_process_no is not None:
            self.dunning_process_no = dunning_process_no
        if client_dunning_process_id is not None:
            self.client_dunning_process_id = client_dunning_process_id
        if po_num is not None:
            self.po_num = po_num
        if supp_plans is not None:
            self.supp_plans = supp_plans
        self.coupon_cd = coupon_cd
        if master_plan_plan_inst_fields is not None:
            self.master_plan_plan_inst_fields = master_plan_plan_inst_fields
        if bill_lag_days is not None:
            self.bill_lag_days = bill_lag_days

    @property
    def master_plan_instance_id(self):
        """Gets the master_plan_instance_id of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The master_plan_instance_id of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._master_plan_instance_id

    @master_plan_instance_id.setter
    def master_plan_instance_id(self, master_plan_instance_id):
        """Sets the master_plan_instance_id of this MasterPlanInstance.

          # noqa: E501

        :param master_plan_instance_id: The master_plan_instance_id of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._master_plan_instance_id = master_plan_instance_id

    @property
    def client_master_plan_instance_id(self):
        """Gets the client_master_plan_instance_id of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The client_master_plan_instance_id of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._client_master_plan_instance_id

    @client_master_plan_instance_id.setter
    def client_master_plan_instance_id(self, client_master_plan_instance_id):
        """Sets the client_master_plan_instance_id of this MasterPlanInstance.

          # noqa: E501

        :param client_master_plan_instance_id: The client_master_plan_instance_id of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._client_master_plan_instance_id = client_master_plan_instance_id

    @property
    def client_master_plan_id(self):
        """Gets the client_master_plan_id of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The client_master_plan_id of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._client_master_plan_id

    @client_master_plan_id.setter
    def client_master_plan_id(self, client_master_plan_id):
        """Sets the client_master_plan_id of this MasterPlanInstance.

          # noqa: E501

        :param client_master_plan_id: The client_master_plan_id of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._client_master_plan_id = client_master_plan_id

    @property
    def master_plan_no(self):
        """Gets the master_plan_no of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The master_plan_no of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._master_plan_no

    @master_plan_no.setter
    def master_plan_no(self, master_plan_no):
        """Sets the master_plan_no of this MasterPlanInstance.

          # noqa: E501

        :param master_plan_no: The master_plan_no of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._master_plan_no = master_plan_no

    @property
    def master_plan_instance_description(self):
        """Gets the master_plan_instance_description of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The master_plan_instance_description of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._master_plan_instance_description

    @master_plan_instance_description.setter
    def master_plan_instance_description(self, master_plan_instance_description):
        """Sets the master_plan_instance_description of this MasterPlanInstance.

          # noqa: E501

        :param master_plan_instance_description: The master_plan_instance_description of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._master_plan_instance_description = master_plan_instance_description

    @property
    def dunning_group_no(self):
        """Gets the dunning_group_no of this MasterPlanInstance.  # noqa: E501

        Aria Internal Id for dunning group  # noqa: E501

        :return: The dunning_group_no of this MasterPlanInstance.  # noqa: E501
        :rtype: int
        """
        return self._dunning_group_no

    @dunning_group_no.setter
    def dunning_group_no(self, dunning_group_no):
        """Sets the dunning_group_no of this MasterPlanInstance.

        Aria Internal Id for dunning group  # noqa: E501

        :param dunning_group_no: The dunning_group_no of this MasterPlanInstance.  # noqa: E501
        :type: int
        """

        self._dunning_group_no = dunning_group_no

    @property
    def client_dunning_group_id(self):
        """Gets the client_dunning_group_id of this MasterPlanInstance.  # noqa: E501

        Client defined dunning group id  # noqa: E501

        :return: The client_dunning_group_id of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._client_dunning_group_id

    @client_dunning_group_id.setter
    def client_dunning_group_id(self, client_dunning_group_id):
        """Sets the client_dunning_group_id of this MasterPlanInstance.

        Client defined dunning group id  # noqa: E501

        :param client_dunning_group_id: The client_dunning_group_id of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._client_dunning_group_id = client_dunning_group_id

    @property
    def dunning_group_name(self):
        """Gets the dunning_group_name of this MasterPlanInstance.  # noqa: E501

        Name of the dunning group  # noqa: E501

        :return: The dunning_group_name of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._dunning_group_name

    @dunning_group_name.setter
    def dunning_group_name(self, dunning_group_name):
        """Sets the dunning_group_name of this MasterPlanInstance.

        Name of the dunning group  # noqa: E501

        :param dunning_group_name: The dunning_group_name of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._dunning_group_name = dunning_group_name

    @property
    def dunning_group_description(self):
        """Gets the dunning_group_description of this MasterPlanInstance.  # noqa: E501

        Dunning group description  # noqa: E501

        :return: The dunning_group_description of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._dunning_group_description

    @dunning_group_description.setter
    def dunning_group_description(self, dunning_group_description):
        """Sets the dunning_group_description of this MasterPlanInstance.

        Dunning group description  # noqa: E501

        :param dunning_group_description: The dunning_group_description of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._dunning_group_description = dunning_group_description

    @property
    def dunning_process_no(self):
        """Gets the dunning_process_no of this MasterPlanInstance.  # noqa: E501

        The unique identifier of the dunning process  # noqa: E501

        :return: The dunning_process_no of this MasterPlanInstance.  # noqa: E501
        :rtype: int
        """
        return self._dunning_process_no

    @dunning_process_no.setter
    def dunning_process_no(self, dunning_process_no):
        """Sets the dunning_process_no of this MasterPlanInstance.

        The unique identifier of the dunning process  # noqa: E501

        :param dunning_process_no: The dunning_process_no of this MasterPlanInstance.  # noqa: E501
        :type: int
        """

        self._dunning_process_no = dunning_process_no

    @property
    def client_dunning_process_id(self):
        """Gets the client_dunning_process_id of this MasterPlanInstance.  # noqa: E501

        The client-defined identifier of the dunning process  # noqa: E501

        :return: The client_dunning_process_id of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._client_dunning_process_id

    @client_dunning_process_id.setter
    def client_dunning_process_id(self, client_dunning_process_id):
        """Sets the client_dunning_process_id of this MasterPlanInstance.

        The client-defined identifier of the dunning process  # noqa: E501

        :param client_dunning_process_id: The client_dunning_process_id of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._client_dunning_process_id = client_dunning_process_id

    @property
    def po_num(self):
        """Gets the po_num of this MasterPlanInstance.  # noqa: E501

        Purchase order number assigned to the account or plan instance.  # noqa: E501

        :return: The po_num of this MasterPlanInstance.  # noqa: E501
        :rtype: str
        """
        return self._po_num

    @po_num.setter
    def po_num(self, po_num):
        """Sets the po_num of this MasterPlanInstance.

        Purchase order number assigned to the account or plan instance.  # noqa: E501

        :param po_num: The po_num of this MasterPlanInstance.  # noqa: E501
        :type: str
        """

        self._po_num = po_num

    @property
    def supp_plans(self):
        """Gets the supp_plans of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The supp_plans of this MasterPlanInstance.  # noqa: E501
        :rtype: list[SuppPlan]
        """
        return self._supp_plans

    @supp_plans.setter
    def supp_plans(self, supp_plans):
        """Sets the supp_plans of this MasterPlanInstance.

          # noqa: E501

        :param supp_plans: The supp_plans of this MasterPlanInstance.  # noqa: E501
        :type: list[SuppPlan]
        """

        self._supp_plans = supp_plans

    @property
    def coupon_cd(self):
        """Gets the coupon_cd of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The coupon_cd of this MasterPlanInstance.  # noqa: E501
        :rtype: list[CouponCd]
        """
        return self._coupon_cd

    @coupon_cd.setter
    def coupon_cd(self, coupon_cd):
        """Sets the coupon_cd of this MasterPlanInstance.

          # noqa: E501

        :param coupon_cd: The coupon_cd of this MasterPlanInstance.  # noqa: E501
        :type: list[CouponCd]
        """
        if coupon_cd is None:
            raise ValueError("Invalid value for `coupon_cd`, must not be `None`")  # noqa: E501

        self._coupon_cd = coupon_cd

    @property
    def master_plan_plan_inst_fields(self):
        """Gets the master_plan_plan_inst_fields of this MasterPlanInstance.  # noqa: E501

          # noqa: E501

        :return: The master_plan_plan_inst_fields of this MasterPlanInstance.  # noqa: E501
        :rtype: list[MasterPlanPlanInstField]
        """
        return self._master_plan_plan_inst_fields

    @master_plan_plan_inst_fields.setter
    def master_plan_plan_inst_fields(self, master_plan_plan_inst_fields):
        """Sets the master_plan_plan_inst_fields of this MasterPlanInstance.

          # noqa: E501

        :param master_plan_plan_inst_fields: The master_plan_plan_inst_fields of this MasterPlanInstance.  # noqa: E501
        :type: list[MasterPlanPlanInstField]
        """

        self._master_plan_plan_inst_fields = master_plan_plan_inst_fields

    @property
    def bill_lag_days(self):
        """Gets the bill_lag_days of this MasterPlanInstance.  # noqa: E501

        Bill lag days refer to the number of days prior to (negative) or after (positive) an account billing date at which an invoice should be generated for this Master Plan Instance.  Negative bill lag days are typically used for subscription-based services (often subscription-based services paid using net-terms), in which the user would like to send out invoices to customers well in advance of the real invoice date.  Positive bill lag days are typically used for usage-based services.   By default, bill lag days are restricted to +/- the (minimum number of days in a recurring interval period  ? 1 day).  However, if the ?Allow Negative Bill Lag Days to Extend Beyond One Bill Cycle?is enabled   set to TRUE)), then the negative value can go beyond a single recurring interval.  The precedence for bill lag days is as follows: Master Plan Instance (for a given account) > Collection Group setting > Payment Gateway setting > Client  setting (Configuration ? Billing ? Bill Lag Days)   # noqa: E501

        :return: The bill_lag_days of this MasterPlanInstance.  # noqa: E501
        :rtype: int
        """
        return self._bill_lag_days

    @bill_lag_days.setter
    def bill_lag_days(self, bill_lag_days):
        """Sets the bill_lag_days of this MasterPlanInstance.

        Bill lag days refer to the number of days prior to (negative) or after (positive) an account billing date at which an invoice should be generated for this Master Plan Instance.  Negative bill lag days are typically used for subscription-based services (often subscription-based services paid using net-terms), in which the user would like to send out invoices to customers well in advance of the real invoice date.  Positive bill lag days are typically used for usage-based services.   By default, bill lag days are restricted to +/- the (minimum number of days in a recurring interval period  ? 1 day).  However, if the ?Allow Negative Bill Lag Days to Extend Beyond One Bill Cycle?is enabled   set to TRUE)), then the negative value can go beyond a single recurring interval.  The precedence for bill lag days is as follows: Master Plan Instance (for a given account) > Collection Group setting > Payment Gateway setting > Client  setting (Configuration ? Billing ? Bill Lag Days)   # noqa: E501

        :param bill_lag_days: The bill_lag_days of this MasterPlanInstance.  # noqa: E501
        :type: int
        """

        self._bill_lag_days = bill_lag_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MasterPlanInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
