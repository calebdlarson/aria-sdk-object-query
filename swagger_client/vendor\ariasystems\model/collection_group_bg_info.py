# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CollectionGroupBgInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collections_group_bg_no': 'int',
        'client_collections_group_bg_id': 'str',
        'collections_group_name': 'str',
        'collections_group_description': 'str'
    }

    attribute_map = {
        'collections_group_bg_no': 'collections_group_bg_no',
        'client_collections_group_bg_id': 'client_collections_group_bg_id',
        'collections_group_name': 'collections_group_name',
        'collections_group_description': 'collections_group_description'
    }

    def __init__(self, collections_group_bg_no=None, client_collections_group_bg_id=None, collections_group_name=None, collections_group_description=None):  # noqa: E501
        """CollectionGroupBgInfo - a model defined in Swagger"""  # noqa: E501

        self._collections_group_bg_no = None
        self._client_collections_group_bg_id = None
        self._collections_group_name = None
        self._collections_group_description = None
        self.discriminator = None

        if collections_group_bg_no is not None:
            self.collections_group_bg_no = collections_group_bg_no
        if client_collections_group_bg_id is not None:
            self.client_collections_group_bg_id = client_collections_group_bg_id
        if collections_group_name is not None:
            self.collections_group_name = collections_group_name
        if collections_group_description is not None:
            self.collections_group_description = collections_group_description

    @property
    def collections_group_bg_no(self):
        """Gets the collections_group_bg_no of this CollectionGroupBgInfo.  # noqa: E501

        Collection Group Number to which this billing group should be assigned.  # noqa: E501

        :return: The collections_group_bg_no of this CollectionGroupBgInfo.  # noqa: E501
        :rtype: int
        """
        return self._collections_group_bg_no

    @collections_group_bg_no.setter
    def collections_group_bg_no(self, collections_group_bg_no):
        """Sets the collections_group_bg_no of this CollectionGroupBgInfo.

        Collection Group Number to which this billing group should be assigned.  # noqa: E501

        :param collections_group_bg_no: The collections_group_bg_no of this CollectionGroupBgInfo.  # noqa: E501
        :type: int
        """

        self._collections_group_bg_no = collections_group_bg_no

    @property
    def client_collections_group_bg_id(self):
        """Gets the client_collections_group_bg_id of this CollectionGroupBgInfo.  # noqa: E501

        Collection Group ID to which this billing group should be assigned.  # noqa: E501

        :return: The client_collections_group_bg_id of this CollectionGroupBgInfo.  # noqa: E501
        :rtype: str
        """
        return self._client_collections_group_bg_id

    @client_collections_group_bg_id.setter
    def client_collections_group_bg_id(self, client_collections_group_bg_id):
        """Sets the client_collections_group_bg_id of this CollectionGroupBgInfo.

        Collection Group ID to which this billing group should be assigned.  # noqa: E501

        :param client_collections_group_bg_id: The client_collections_group_bg_id of this CollectionGroupBgInfo.  # noqa: E501
        :type: str
        """

        self._client_collections_group_bg_id = client_collections_group_bg_id

    @property
    def collections_group_name(self):
        """Gets the collections_group_name of this CollectionGroupBgInfo.  # noqa: E501

        Collections Group Name  # noqa: E501

        :return: The collections_group_name of this CollectionGroupBgInfo.  # noqa: E501
        :rtype: str
        """
        return self._collections_group_name

    @collections_group_name.setter
    def collections_group_name(self, collections_group_name):
        """Sets the collections_group_name of this CollectionGroupBgInfo.

        Collections Group Name  # noqa: E501

        :param collections_group_name: The collections_group_name of this CollectionGroupBgInfo.  # noqa: E501
        :type: str
        """

        self._collections_group_name = collections_group_name

    @property
    def collections_group_description(self):
        """Gets the collections_group_description of this CollectionGroupBgInfo.  # noqa: E501

        Collections group description  # noqa: E501

        :return: The collections_group_description of this CollectionGroupBgInfo.  # noqa: E501
        :rtype: str
        """
        return self._collections_group_description

    @collections_group_description.setter
    def collections_group_description(self, collections_group_description):
        """Sets the collections_group_description of this CollectionGroupBgInfo.

        Collections group description  # noqa: E501

        :param collections_group_description: The collections_group_description of this CollectionGroupBgInfo.  # noqa: E501
        :type: str
        """

        self._collections_group_description = collections_group_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionGroupBgInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
