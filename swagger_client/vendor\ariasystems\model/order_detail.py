# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.vendor\ariasystems\model.order_item import OrderItem  # noqa: F401,E501


class OrderDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_no': 'int',
        'acct_no': 'int',
        'user_id': 'str',
        'invoice_no': 'str',
        'create_date': 'str',
        'amount': 'float',
        'currency_cd': 'str',
        'last_updated': 'str',
        'order_status': 'str',
        'po_num': 'str',
        'order_item': 'list[OrderItem]'
    }

    attribute_map = {
        'order_no': 'order_no',
        'acct_no': 'acct_no',
        'user_id': 'user_id',
        'invoice_no': 'invoice_no',
        'create_date': 'create_date',
        'amount': 'amount',
        'currency_cd': 'currency_cd',
        'last_updated': 'last_updated',
        'order_status': 'order_status',
        'po_num': 'po_num',
        'order_item': 'order_item'
    }

    def __init__(self, order_no=None, acct_no=None, user_id=None, invoice_no=None, create_date=None, amount=None, currency_cd=None, last_updated=None, order_status=None, po_num=None, order_item=None):  # noqa: E501
        """OrderDetail - a model defined in Swagger"""  # noqa: E501

        self._order_no = None
        self._acct_no = None
        self._user_id = None
        self._invoice_no = None
        self._create_date = None
        self._amount = None
        self._currency_cd = None
        self._last_updated = None
        self._order_status = None
        self._po_num = None
        self._order_item = None
        self.discriminator = None

        self.order_no = order_no
        self.acct_no = acct_no
        self.user_id = user_id
        if invoice_no is not None:
            self.invoice_no = invoice_no
        if create_date is not None:
            self.create_date = create_date
        if amount is not None:
            self.amount = amount
        if currency_cd is not None:
            self.currency_cd = currency_cd
        if last_updated is not None:
            self.last_updated = last_updated
        self.order_status = order_status
        if po_num is not None:
            self.po_num = po_num
        if order_item is not None:
            self.order_item = order_item

    @property
    def order_no(self):
        """Gets the order_no of this OrderDetail.  # noqa: E501

        The Aria assigned ID of the order  # noqa: E501

        :return: The order_no of this OrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this OrderDetail.

        The Aria assigned ID of the order  # noqa: E501

        :param order_no: The order_no of this OrderDetail.  # noqa: E501
        :type: int
        """
        if order_no is None:
            raise ValueError("Invalid value for `order_no`, must not be `None`")  # noqa: E501

        self._order_no = order_no

    @property
    def acct_no(self):
        """Gets the acct_no of this OrderDetail.  # noqa: E501

        The Aria assigned ID of the account  # noqa: E501

        :return: The acct_no of this OrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._acct_no

    @acct_no.setter
    def acct_no(self, acct_no):
        """Sets the acct_no of this OrderDetail.

        The Aria assigned ID of the account  # noqa: E501

        :param acct_no: The acct_no of this OrderDetail.  # noqa: E501
        :type: int
        """
        if acct_no is None:
            raise ValueError("Invalid value for `acct_no`, must not be `None`")  # noqa: E501

        self._acct_no = acct_no

    @property
    def user_id(self):
        """Gets the user_id of this OrderDetail.  # noqa: E501

        The client defined user_id for the account  # noqa: E501

        :return: The user_id of this OrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OrderDetail.

        The client defined user_id for the account  # noqa: E501

        :param user_id: The user_id of this OrderDetail.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def invoice_no(self):
        """Gets the invoice_no of this OrderDetail.  # noqa: E501

        The Aria assigned ID of the invoice on which this order appears  # noqa: E501

        :return: The invoice_no of this OrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._invoice_no

    @invoice_no.setter
    def invoice_no(self, invoice_no):
        """Sets the invoice_no of this OrderDetail.

        The Aria assigned ID of the invoice on which this order appears  # noqa: E501

        :param invoice_no: The invoice_no of this OrderDetail.  # noqa: E501
        :type: str
        """

        self._invoice_no = invoice_no

    @property
    def create_date(self):
        """Gets the create_date of this OrderDetail.  # noqa: E501

          # noqa: E501

        :return: The create_date of this OrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this OrderDetail.

          # noqa: E501

        :param create_date: The create_date of this OrderDetail.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def amount(self):
        """Gets the amount of this OrderDetail.  # noqa: E501

          # noqa: E501

        :return: The amount of this OrderDetail.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderDetail.

          # noqa: E501

        :param amount: The amount of this OrderDetail.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency_cd(self):
        """Gets the currency_cd of this OrderDetail.  # noqa: E501

          # noqa: E501

        :return: The currency_cd of this OrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._currency_cd

    @currency_cd.setter
    def currency_cd(self, currency_cd):
        """Sets the currency_cd of this OrderDetail.

          # noqa: E501

        :param currency_cd: The currency_cd of this OrderDetail.  # noqa: E501
        :type: str
        """

        self._currency_cd = currency_cd

    @property
    def last_updated(self):
        """Gets the last_updated of this OrderDetail.  # noqa: E501

          # noqa: E501

        :return: The last_updated of this OrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this OrderDetail.

          # noqa: E501

        :param last_updated: The last_updated of this OrderDetail.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def order_status(self):
        """Gets the order_status of this OrderDetail.  # noqa: E501

          # noqa: E501

        :return: The order_status of this OrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this OrderDetail.

          # noqa: E501

        :param order_status: The order_status of this OrderDetail.  # noqa: E501
        :type: str
        """
        if order_status is None:
            raise ValueError("Invalid value for `order_status`, must not be `None`")  # noqa: E501

        self._order_status = order_status

    @property
    def po_num(self):
        """Gets the po_num of this OrderDetail.  # noqa: E501

        Purchase Order Number for this order.  # noqa: E501

        :return: The po_num of this OrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._po_num

    @po_num.setter
    def po_num(self, po_num):
        """Sets the po_num of this OrderDetail.

        Purchase Order Number for this order.  # noqa: E501

        :param po_num: The po_num of this OrderDetail.  # noqa: E501
        :type: str
        """

        self._po_num = po_num

    @property
    def order_item(self):
        """Gets the order_item of this OrderDetail.  # noqa: E501

          # noqa: E501

        :return: The order_item of this OrderDetail.  # noqa: E501
        :rtype: list[OrderItem]
        """
        return self._order_item

    @order_item.setter
    def order_item(self, order_item):
        """Sets the order_item of this OrderDetail.

          # noqa: E501

        :param order_item: The order_item of this OrderDetail.  # noqa: E501
        :type: list[OrderItem]
        """

        self._order_item = order_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
