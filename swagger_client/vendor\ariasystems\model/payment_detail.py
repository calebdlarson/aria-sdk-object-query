# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_id': 'int',
        'processor_payment_id': 'str',
        'acct_no': 'int',
        'user_id': 'str',
        'currency_cd': 'str',
        'payment_date': 'str',
        'amount': 'float',
        'collection_status_cd': 'str',
        'collection_status_text': 'str',
        'processor_name': 'str',
        'method': 'str',
        'reference_num': 'str',
        'last_updated': 'str',
        'voiding_event_no': 'int'
    }

    attribute_map = {
        'payment_id': 'payment_id',
        'processor_payment_id': 'processor_payment_id',
        'acct_no': 'acct_no',
        'user_id': 'user_id',
        'currency_cd': 'currency_cd',
        'payment_date': 'payment_date',
        'amount': 'amount',
        'collection_status_cd': 'collection_status_cd',
        'collection_status_text': 'collection_status_text',
        'processor_name': 'processor_name',
        'method': 'method',
        'reference_num': 'reference_num',
        'last_updated': 'last_updated',
        'voiding_event_no': 'voiding_event_no'
    }

    def __init__(self, payment_id=None, processor_payment_id=None, acct_no=None, user_id=None, currency_cd=None, payment_date=None, amount=None, collection_status_cd=None, collection_status_text=None, processor_name=None, method=None, reference_num=None, last_updated=None, voiding_event_no=None):  # noqa: E501
        """PaymentDetail - a model defined in Swagger"""  # noqa: E501

        self._payment_id = None
        self._processor_payment_id = None
        self._acct_no = None
        self._user_id = None
        self._currency_cd = None
        self._payment_date = None
        self._amount = None
        self._collection_status_cd = None
        self._collection_status_text = None
        self._processor_name = None
        self._method = None
        self._reference_num = None
        self._last_updated = None
        self._voiding_event_no = None
        self.discriminator = None

        self.payment_id = payment_id
        if processor_payment_id is not None:
            self.processor_payment_id = processor_payment_id
        self.acct_no = acct_no
        self.user_id = user_id
        self.currency_cd = currency_cd
        self.payment_date = payment_date
        self.amount = amount
        if collection_status_cd is not None:
            self.collection_status_cd = collection_status_cd
        if collection_status_text is not None:
            self.collection_status_text = collection_status_text
        self.processor_name = processor_name
        self.method = method
        if reference_num is not None:
            self.reference_num = reference_num
        self.last_updated = last_updated
        if voiding_event_no is not None:
            self.voiding_event_no = voiding_event_no

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentDetail.  # noqa: E501

        The Aria assigned ID of the payment  # noqa: E501

        :return: The payment_id of this PaymentDetail.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentDetail.

        The Aria assigned ID of the payment  # noqa: E501

        :param payment_id: The payment_id of this PaymentDetail.  # noqa: E501
        :type: int
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501

        self._payment_id = payment_id

    @property
    def processor_payment_id(self):
        """Gets the processor_payment_id of this PaymentDetail.  # noqa: E501

        The payment processor assigned ID of the payment  # noqa: E501

        :return: The processor_payment_id of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._processor_payment_id

    @processor_payment_id.setter
    def processor_payment_id(self, processor_payment_id):
        """Sets the processor_payment_id of this PaymentDetail.

        The payment processor assigned ID of the payment  # noqa: E501

        :param processor_payment_id: The processor_payment_id of this PaymentDetail.  # noqa: E501
        :type: str
        """

        self._processor_payment_id = processor_payment_id

    @property
    def acct_no(self):
        """Gets the acct_no of this PaymentDetail.  # noqa: E501

        The Aria assigned ID of the account  # noqa: E501

        :return: The acct_no of this PaymentDetail.  # noqa: E501
        :rtype: int
        """
        return self._acct_no

    @acct_no.setter
    def acct_no(self, acct_no):
        """Sets the acct_no of this PaymentDetail.

        The Aria assigned ID of the account  # noqa: E501

        :param acct_no: The acct_no of this PaymentDetail.  # noqa: E501
        :type: int
        """
        if acct_no is None:
            raise ValueError("Invalid value for `acct_no`, must not be `None`")  # noqa: E501

        self._acct_no = acct_no

    @property
    def user_id(self):
        """Gets the user_id of this PaymentDetail.  # noqa: E501

        The client defined user_id for the account  # noqa: E501

        :return: The user_id of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PaymentDetail.

        The client defined user_id for the account  # noqa: E501

        :param user_id: The user_id of this PaymentDetail.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def currency_cd(self):
        """Gets the currency_cd of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The currency_cd of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._currency_cd

    @currency_cd.setter
    def currency_cd(self, currency_cd):
        """Sets the currency_cd of this PaymentDetail.

          # noqa: E501

        :param currency_cd: The currency_cd of this PaymentDetail.  # noqa: E501
        :type: str
        """
        if currency_cd is None:
            raise ValueError("Invalid value for `currency_cd`, must not be `None`")  # noqa: E501

        self._currency_cd = currency_cd

    @property
    def payment_date(self):
        """Gets the payment_date of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The payment_date of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PaymentDetail.

          # noqa: E501

        :param payment_date: The payment_date of this PaymentDetail.  # noqa: E501
        :type: str
        """
        if payment_date is None:
            raise ValueError("Invalid value for `payment_date`, must not be `None`")  # noqa: E501

        self._payment_date = payment_date

    @property
    def amount(self):
        """Gets the amount of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The amount of this PaymentDetail.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentDetail.

          # noqa: E501

        :param amount: The amount of this PaymentDetail.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def collection_status_cd(self):
        """Gets the collection_status_cd of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The collection_status_cd of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._collection_status_cd

    @collection_status_cd.setter
    def collection_status_cd(self, collection_status_cd):
        """Sets the collection_status_cd of this PaymentDetail.

          # noqa: E501

        :param collection_status_cd: The collection_status_cd of this PaymentDetail.  # noqa: E501
        :type: str
        """

        self._collection_status_cd = collection_status_cd

    @property
    def collection_status_text(self):
        """Gets the collection_status_text of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The collection_status_text of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._collection_status_text

    @collection_status_text.setter
    def collection_status_text(self, collection_status_text):
        """Sets the collection_status_text of this PaymentDetail.

          # noqa: E501

        :param collection_status_text: The collection_status_text of this PaymentDetail.  # noqa: E501
        :type: str
        """

        self._collection_status_text = collection_status_text

    @property
    def processor_name(self):
        """Gets the processor_name of this PaymentDetail.  # noqa: E501

        The name of the processor used  # noqa: E501

        :return: The processor_name of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._processor_name

    @processor_name.setter
    def processor_name(self, processor_name):
        """Sets the processor_name of this PaymentDetail.

        The name of the processor used  # noqa: E501

        :param processor_name: The processor_name of this PaymentDetail.  # noqa: E501
        :type: str
        """
        if processor_name is None:
            raise ValueError("Invalid value for `processor_name`, must not be `None`")  # noqa: E501

        self._processor_name = processor_name

    @property
    def method(self):
        """Gets the method of this PaymentDetail.  # noqa: E501

        The name Payment method used  # noqa: E501

        :return: The method of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PaymentDetail.

        The name Payment method used  # noqa: E501

        :param method: The method of this PaymentDetail.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def reference_num(self):
        """Gets the reference_num of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The reference_num of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._reference_num

    @reference_num.setter
    def reference_num(self, reference_num):
        """Sets the reference_num of this PaymentDetail.

          # noqa: E501

        :param reference_num: The reference_num of this PaymentDetail.  # noqa: E501
        :type: str
        """

        self._reference_num = reference_num

    @property
    def last_updated(self):
        """Gets the last_updated of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The last_updated of this PaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PaymentDetail.

          # noqa: E501

        :param last_updated: The last_updated of this PaymentDetail.  # noqa: E501
        :type: str
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    @property
    def voiding_event_no(self):
        """Gets the voiding_event_no of this PaymentDetail.  # noqa: E501

          # noqa: E501

        :return: The voiding_event_no of this PaymentDetail.  # noqa: E501
        :rtype: int
        """
        return self._voiding_event_no

    @voiding_event_no.setter
    def voiding_event_no(self, voiding_event_no):
        """Sets the voiding_event_no of this PaymentDetail.

          # noqa: E501

        :param voiding_event_no: The voiding_event_no of this PaymentDetail.  # noqa: E501
        :type: int
        """

        self._voiding_event_no = voiding_event_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
