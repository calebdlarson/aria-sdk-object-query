# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.vendor\ariasystems\model.acct_supp_field import AcctSuppField  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.billing_group import BillingGroup  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.collection_acct_group import CollectionAcctGroup  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.functional_acct_group import FunctionalAcctGroup  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.master_plan_instance import MasterPlanInstance  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.matching_contact import MatchingContact  # noqa: F401,E501
from swagger_client.vendor\ariasystems\model.surcharge_no import SurchargeNo  # noqa: F401,E501


class AccountDetailsM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acct_no': 'int',
        'client_acct_id': 'str',
        'user_id': 'str',
        'first_name': 'str',
        'mi': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'address1': 'str',
        'address2': 'str',
        'address3': 'str',
        'city': 'str',
        'locality': 'str',
        'state_prov': 'str',
        'state_prov_cd': 'str',
        'country_cd': 'str',
        'postal_cd': 'str',
        'phone': 'str',
        'phone_ext': 'str',
        'cell_phone': 'str',
        'work_phone': 'str',
        'work_phone_ext': 'str',
        'fax': 'str',
        'email': 'str',
        'stmt_email_list_cc': 'str',
        'stmt_email_list_bcc': 'str',
        'birthdate': 'str',
        'status_cd': 'str',
        'notify_method': 'int',
        'senior_acct_no': 'int',
        'senior_acct_user_id': 'str',
        'senior_client_acct_id': 'str',
        'test_acct_ind': 'int',
        'taxpayer_id': 'str',
        'acct_start_date': 'str',
        'alt_msg_template_no': 'int',
        'seq_func_group_no': 'int',
        'tax_exemption_level': 'int',
        'client_alt_msg_template_id': 'str',
        'client_cn_alt_msg_template_id': 'str',
        'functional_acct_groups': 'list[FunctionalAcctGroup]',
        'collection_acct_groups': 'list[CollectionAcctGroup]',
        'acct_supp_fields': 'list[AcctSuppField]',
        'surcharge_no': 'list[SurchargeNo]',
        'acct_currency': 'str',
        'acct_balance': 'str',
        'unapplied_payment_summary': 'float',
        'address_verification_code': 'str',
        'address_match_score': 'int',
        'billing_groups': 'list[BillingGroup]',
        'master_plan_instances': 'list[MasterPlanInstance]',
        'consumer_acct_ind': 'str',
        'po_num': 'str',
        'list_start_master_file': 'int',
        'matching_contacts': 'list[MatchingContact]',
        'legal_entity_no': 'int',
        'legal_entity_name': 'str',
        'client_legal_entity_id': 'str'
    }

    attribute_map = {
        'acct_no': 'acct_no',
        'client_acct_id': 'client_acct_id',
        'user_id': 'user_id',
        'first_name': 'first_name',
        'mi': 'mi',
        'last_name': 'last_name',
        'company_name': 'company_name',
        'address1': 'address1',
        'address2': 'address2',
        'address3': 'address3',
        'city': 'city',
        'locality': 'locality',
        'state_prov': 'state_prov',
        'state_prov_cd': 'state_prov_cd',
        'country_cd': 'country_cd',
        'postal_cd': 'postal_cd',
        'phone': 'phone',
        'phone_ext': 'phone_ext',
        'cell_phone': 'cell_phone',
        'work_phone': 'work_phone',
        'work_phone_ext': 'work_phone_ext',
        'fax': 'fax',
        'email': 'email',
        'stmt_email_list_cc': 'stmt_email_list_cc',
        'stmt_email_list_bcc': 'stmt_email_list_bcc',
        'birthdate': 'birthdate',
        'status_cd': 'status_cd',
        'notify_method': 'notify_method',
        'senior_acct_no': 'senior_acct_no',
        'senior_acct_user_id': 'senior_acct_user_id',
        'senior_client_acct_id': 'senior_client_acct_id',
        'test_acct_ind': 'test_acct_ind',
        'taxpayer_id': 'taxpayer_id',
        'acct_start_date': 'acct_start_date',
        'alt_msg_template_no': 'alt_msg_template_no',
        'seq_func_group_no': 'seq_func_group_no',
        'tax_exemption_level': 'tax_exemption_level',
        'client_alt_msg_template_id': 'client_alt_msg_template_id',
        'client_cn_alt_msg_template_id': 'client_cn_alt_msg_template_id',
        'functional_acct_groups': 'functional_acct_groups',
        'collection_acct_groups': 'collection_acct_groups',
        'acct_supp_fields': 'acct_supp_fields',
        'surcharge_no': 'surcharge_no',
        'acct_currency': 'acct_currency',
        'acct_balance': 'acct_balance',
        'unapplied_payment_summary': 'unapplied_payment_summary',
        'address_verification_code': 'address_verification_code',
        'address_match_score': 'address_match_score',
        'billing_groups': 'billing_groups',
        'master_plan_instances': 'master_plan_instances',
        'consumer_acct_ind': 'consumer_acct_ind',
        'po_num': 'po_num',
        'list_start_master_file': 'list_start_master_file',
        'matching_contacts': 'matching_contacts',
        'legal_entity_no': 'legal_entity_no',
        'legal_entity_name': 'legal_entity_name',
        'client_legal_entity_id': 'client_legal_entity_id'
    }

    def __init__(self, acct_no=None, client_acct_id=None, user_id=None, first_name=None, mi=None, last_name=None, company_name=None, address1=None, address2=None, address3=None, city=None, locality=None, state_prov=None, state_prov_cd=None, country_cd=None, postal_cd=None, phone=None, phone_ext=None, cell_phone=None, work_phone=None, work_phone_ext=None, fax=None, email=None, stmt_email_list_cc=None, stmt_email_list_bcc=None, birthdate=None, status_cd=None, notify_method=None, senior_acct_no=None, senior_acct_user_id=None, senior_client_acct_id=None, test_acct_ind=None, taxpayer_id=None, acct_start_date=None, alt_msg_template_no=None, seq_func_group_no=None, tax_exemption_level=None, client_alt_msg_template_id=None, client_cn_alt_msg_template_id=None, functional_acct_groups=None, collection_acct_groups=None, acct_supp_fields=None, surcharge_no=None, acct_currency=None, acct_balance=None, unapplied_payment_summary=None, address_verification_code=None, address_match_score=None, billing_groups=None, master_plan_instances=None, consumer_acct_ind=None, po_num=None, list_start_master_file=None, matching_contacts=None, legal_entity_no=None, legal_entity_name=None, client_legal_entity_id=None):  # noqa: E501
        """AccountDetailsM - a model defined in Swagger"""  # noqa: E501

        self._acct_no = None
        self._client_acct_id = None
        self._user_id = None
        self._first_name = None
        self._mi = None
        self._last_name = None
        self._company_name = None
        self._address1 = None
        self._address2 = None
        self._address3 = None
        self._city = None
        self._locality = None
        self._state_prov = None
        self._state_prov_cd = None
        self._country_cd = None
        self._postal_cd = None
        self._phone = None
        self._phone_ext = None
        self._cell_phone = None
        self._work_phone = None
        self._work_phone_ext = None
        self._fax = None
        self._email = None
        self._stmt_email_list_cc = None
        self._stmt_email_list_bcc = None
        self._birthdate = None
        self._status_cd = None
        self._notify_method = None
        self._senior_acct_no = None
        self._senior_acct_user_id = None
        self._senior_client_acct_id = None
        self._test_acct_ind = None
        self._taxpayer_id = None
        self._acct_start_date = None
        self._alt_msg_template_no = None
        self._seq_func_group_no = None
        self._tax_exemption_level = None
        self._client_alt_msg_template_id = None
        self._client_cn_alt_msg_template_id = None
        self._functional_acct_groups = None
        self._collection_acct_groups = None
        self._acct_supp_fields = None
        self._surcharge_no = None
        self._acct_currency = None
        self._acct_balance = None
        self._unapplied_payment_summary = None
        self._address_verification_code = None
        self._address_match_score = None
        self._billing_groups = None
        self._master_plan_instances = None
        self._consumer_acct_ind = None
        self._po_num = None
        self._list_start_master_file = None
        self._matching_contacts = None
        self._legal_entity_no = None
        self._legal_entity_name = None
        self._client_legal_entity_id = None
        self.discriminator = None

        if acct_no is not None:
            self.acct_no = acct_no
        if client_acct_id is not None:
            self.client_acct_id = client_acct_id
        if user_id is not None:
            self.user_id = user_id
        if first_name is not None:
            self.first_name = first_name
        if mi is not None:
            self.mi = mi
        if last_name is not None:
            self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if address3 is not None:
            self.address3 = address3
        if city is not None:
            self.city = city
        if locality is not None:
            self.locality = locality
        if state_prov is not None:
            self.state_prov = state_prov
        if state_prov_cd is not None:
            self.state_prov_cd = state_prov_cd
        if country_cd is not None:
            self.country_cd = country_cd
        if postal_cd is not None:
            self.postal_cd = postal_cd
        if phone is not None:
            self.phone = phone
        if phone_ext is not None:
            self.phone_ext = phone_ext
        if cell_phone is not None:
            self.cell_phone = cell_phone
        if work_phone is not None:
            self.work_phone = work_phone
        if work_phone_ext is not None:
            self.work_phone_ext = work_phone_ext
        if fax is not None:
            self.fax = fax
        if email is not None:
            self.email = email
        if stmt_email_list_cc is not None:
            self.stmt_email_list_cc = stmt_email_list_cc
        if stmt_email_list_bcc is not None:
            self.stmt_email_list_bcc = stmt_email_list_bcc
        if birthdate is not None:
            self.birthdate = birthdate
        if status_cd is not None:
            self.status_cd = status_cd
        if notify_method is not None:
            self.notify_method = notify_method
        if senior_acct_no is not None:
            self.senior_acct_no = senior_acct_no
        if senior_acct_user_id is not None:
            self.senior_acct_user_id = senior_acct_user_id
        if senior_client_acct_id is not None:
            self.senior_client_acct_id = senior_client_acct_id
        if test_acct_ind is not None:
            self.test_acct_ind = test_acct_ind
        if taxpayer_id is not None:
            self.taxpayer_id = taxpayer_id
        if acct_start_date is not None:
            self.acct_start_date = acct_start_date
        if alt_msg_template_no is not None:
            self.alt_msg_template_no = alt_msg_template_no
        if seq_func_group_no is not None:
            self.seq_func_group_no = seq_func_group_no
        if tax_exemption_level is not None:
            self.tax_exemption_level = tax_exemption_level
        if client_alt_msg_template_id is not None:
            self.client_alt_msg_template_id = client_alt_msg_template_id
        if client_cn_alt_msg_template_id is not None:
            self.client_cn_alt_msg_template_id = client_cn_alt_msg_template_id
        self.functional_acct_groups = functional_acct_groups
        self.collection_acct_groups = collection_acct_groups
        if acct_supp_fields is not None:
            self.acct_supp_fields = acct_supp_fields
        self.surcharge_no = surcharge_no
        if acct_currency is not None:
            self.acct_currency = acct_currency
        if acct_balance is not None:
            self.acct_balance = acct_balance
        if unapplied_payment_summary is not None:
            self.unapplied_payment_summary = unapplied_payment_summary
        if address_verification_code is not None:
            self.address_verification_code = address_verification_code
        if address_match_score is not None:
            self.address_match_score = address_match_score
        if billing_groups is not None:
            self.billing_groups = billing_groups
        if master_plan_instances is not None:
            self.master_plan_instances = master_plan_instances
        if consumer_acct_ind is not None:
            self.consumer_acct_ind = consumer_acct_ind
        if po_num is not None:
            self.po_num = po_num
        if list_start_master_file is not None:
            self.list_start_master_file = list_start_master_file
        if matching_contacts is not None:
            self.matching_contacts = matching_contacts
        if legal_entity_no is not None:
            self.legal_entity_no = legal_entity_no
        if legal_entity_name is not None:
            self.legal_entity_name = legal_entity_name
        if client_legal_entity_id is not None:
            self.client_legal_entity_id = client_legal_entity_id

    @property
    def acct_no(self):
        """Gets the acct_no of this AccountDetailsM.  # noqa: E501

        The Aria assigned ID of the account  # noqa: E501

        :return: The acct_no of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._acct_no

    @acct_no.setter
    def acct_no(self, acct_no):
        """Sets the acct_no of this AccountDetailsM.

        The Aria assigned ID of the account  # noqa: E501

        :param acct_no: The acct_no of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._acct_no = acct_no

    @property
    def client_acct_id(self):
        """Gets the client_acct_id of this AccountDetailsM.  # noqa: E501

        Client specified account identifier  # noqa: E501

        :return: The client_acct_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._client_acct_id

    @client_acct_id.setter
    def client_acct_id(self, client_acct_id):
        """Sets the client_acct_id of this AccountDetailsM.

        Client specified account identifier  # noqa: E501

        :param client_acct_id: The client_acct_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._client_acct_id = client_acct_id

    @property
    def user_id(self):
        """Gets the user_id of this AccountDetailsM.  # noqa: E501

        The client defined user_id for the account  # noqa: E501

        :return: The user_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccountDetailsM.

        The client defined user_id for the account  # noqa: E501

        :param user_id: The user_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The first_name of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AccountDetailsM.

          # noqa: E501

        :param first_name: The first_name of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def mi(self):
        """Gets the mi of this AccountDetailsM.  # noqa: E501

        Middle initial  # noqa: E501

        :return: The mi of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._mi

    @mi.setter
    def mi(self, mi):
        """Sets the mi of this AccountDetailsM.

        Middle initial  # noqa: E501

        :param mi: The mi of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._mi = mi

    @property
    def last_name(self):
        """Gets the last_name of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The last_name of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AccountDetailsM.

          # noqa: E501

        :param last_name: The last_name of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The company_name of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AccountDetailsM.

          # noqa: E501

        :param company_name: The company_name of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def address1(self):
        """Gets the address1 of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The address1 of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this AccountDetailsM.

          # noqa: E501

        :param address1: The address1 of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The address2 of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this AccountDetailsM.

          # noqa: E501

        :param address2: The address2 of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The address3 of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this AccountDetailsM.

          # noqa: E501

        :param address3: The address3 of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._address3 = address3

    @property
    def city(self):
        """Gets the city of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The city of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountDetailsM.

          # noqa: E501

        :param city: The city of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def locality(self):
        """Gets the locality of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The locality of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this AccountDetailsM.

          # noqa: E501

        :param locality: The locality of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def state_prov(self):
        """Gets the state_prov of this AccountDetailsM.  # noqa: E501

        State or Province Name  # noqa: E501

        :return: The state_prov of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._state_prov

    @state_prov.setter
    def state_prov(self, state_prov):
        """Sets the state_prov of this AccountDetailsM.

        State or Province Name  # noqa: E501

        :param state_prov: The state_prov of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._state_prov = state_prov

    @property
    def state_prov_cd(self):
        """Gets the state_prov_cd of this AccountDetailsM.  # noqa: E501

        State or Province Code  # noqa: E501

        :return: The state_prov_cd of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._state_prov_cd

    @state_prov_cd.setter
    def state_prov_cd(self, state_prov_cd):
        """Sets the state_prov_cd of this AccountDetailsM.

        State or Province Code  # noqa: E501

        :param state_prov_cd: The state_prov_cd of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._state_prov_cd = state_prov_cd

    @property
    def country_cd(self):
        """Gets the country_cd of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The country_cd of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._country_cd

    @country_cd.setter
    def country_cd(self, country_cd):
        """Sets the country_cd of this AccountDetailsM.

          # noqa: E501

        :param country_cd: The country_cd of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._country_cd = country_cd

    @property
    def postal_cd(self):
        """Gets the postal_cd of this AccountDetailsM.  # noqa: E501

        Postal code  # noqa: E501

        :return: The postal_cd of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._postal_cd

    @postal_cd.setter
    def postal_cd(self, postal_cd):
        """Sets the postal_cd of this AccountDetailsM.

        Postal code  # noqa: E501

        :param postal_cd: The postal_cd of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._postal_cd = postal_cd

    @property
    def phone(self):
        """Gets the phone of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The phone of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AccountDetailsM.

          # noqa: E501

        :param phone: The phone of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def phone_ext(self):
        """Gets the phone_ext of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The phone_ext of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._phone_ext

    @phone_ext.setter
    def phone_ext(self, phone_ext):
        """Sets the phone_ext of this AccountDetailsM.

          # noqa: E501

        :param phone_ext: The phone_ext of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._phone_ext = phone_ext

    @property
    def cell_phone(self):
        """Gets the cell_phone of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The cell_phone of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this AccountDetailsM.

          # noqa: E501

        :param cell_phone: The cell_phone of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._cell_phone = cell_phone

    @property
    def work_phone(self):
        """Gets the work_phone of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The work_phone of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this AccountDetailsM.

          # noqa: E501

        :param work_phone: The work_phone of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._work_phone = work_phone

    @property
    def work_phone_ext(self):
        """Gets the work_phone_ext of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The work_phone_ext of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._work_phone_ext

    @work_phone_ext.setter
    def work_phone_ext(self, work_phone_ext):
        """Sets the work_phone_ext of this AccountDetailsM.

          # noqa: E501

        :param work_phone_ext: The work_phone_ext of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._work_phone_ext = work_phone_ext

    @property
    def fax(self):
        """Gets the fax of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The fax of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this AccountDetailsM.

          # noqa: E501

        :param fax: The fax of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def email(self):
        """Gets the email of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The email of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountDetailsM.

          # noqa: E501

        :param email: The email of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def stmt_email_list_cc(self):
        """Gets the stmt_email_list_cc of this AccountDetailsM.  # noqa: E501

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :return: The stmt_email_list_cc of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._stmt_email_list_cc

    @stmt_email_list_cc.setter
    def stmt_email_list_cc(self, stmt_email_list_cc):
        """Sets the stmt_email_list_cc of this AccountDetailsM.

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :param stmt_email_list_cc: The stmt_email_list_cc of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._stmt_email_list_cc = stmt_email_list_cc

    @property
    def stmt_email_list_bcc(self):
        """Gets the stmt_email_list_bcc of this AccountDetailsM.  # noqa: E501

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :return: The stmt_email_list_bcc of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._stmt_email_list_bcc

    @stmt_email_list_bcc.setter
    def stmt_email_list_bcc(self, stmt_email_list_bcc):
        """Sets the stmt_email_list_bcc of this AccountDetailsM.

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :param stmt_email_list_bcc: The stmt_email_list_bcc of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._stmt_email_list_bcc = stmt_email_list_bcc

    @property
    def birthdate(self):
        """Gets the birthdate of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The birthdate of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this AccountDetailsM.

          # noqa: E501

        :param birthdate: The birthdate of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._birthdate = birthdate

    @property
    def status_cd(self):
        """Gets the status_cd of this AccountDetailsM.  # noqa: E501

        The status code of the account. See the Aria Account Services API documentation for details   # noqa: E501

        :return: The status_cd of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._status_cd

    @status_cd.setter
    def status_cd(self, status_cd):
        """Sets the status_cd of this AccountDetailsM.

        The status code of the account. See the Aria Account Services API documentation for details   # noqa: E501

        :param status_cd: The status_cd of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._status_cd = status_cd

    @property
    def notify_method(self):
        """Gets the notify_method of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The notify_method of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._notify_method

    @notify_method.setter
    def notify_method(self, notify_method):
        """Sets the notify_method of this AccountDetailsM.

          # noqa: E501

        :param notify_method: The notify_method of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._notify_method = notify_method

    @property
    def senior_acct_no(self):
        """Gets the senior_acct_no of this AccountDetailsM.  # noqa: E501

        The Aria assigned ID of the parent account, if any.  # noqa: E501

        :return: The senior_acct_no of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._senior_acct_no

    @senior_acct_no.setter
    def senior_acct_no(self, senior_acct_no):
        """Sets the senior_acct_no of this AccountDetailsM.

        The Aria assigned ID of the parent account, if any.  # noqa: E501

        :param senior_acct_no: The senior_acct_no of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._senior_acct_no = senior_acct_no

    @property
    def senior_acct_user_id(self):
        """Gets the senior_acct_user_id of this AccountDetailsM.  # noqa: E501

        The user_id of the parent account, if any.  # noqa: E501

        :return: The senior_acct_user_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._senior_acct_user_id

    @senior_acct_user_id.setter
    def senior_acct_user_id(self, senior_acct_user_id):
        """Sets the senior_acct_user_id of this AccountDetailsM.

        The user_id of the parent account, if any.  # noqa: E501

        :param senior_acct_user_id: The senior_acct_user_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._senior_acct_user_id = senior_acct_user_id

    @property
    def senior_client_acct_id(self):
        """Gets the senior_client_acct_id of this AccountDetailsM.  # noqa: E501

        The client specified account identifier of the parent account, if any.  # noqa: E501

        :return: The senior_client_acct_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._senior_client_acct_id

    @senior_client_acct_id.setter
    def senior_client_acct_id(self, senior_client_acct_id):
        """Sets the senior_client_acct_id of this AccountDetailsM.

        The client specified account identifier of the parent account, if any.  # noqa: E501

        :param senior_client_acct_id: The senior_client_acct_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._senior_client_acct_id = senior_client_acct_id

    @property
    def test_acct_ind(self):
        """Gets the test_acct_ind of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The test_acct_ind of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._test_acct_ind

    @test_acct_ind.setter
    def test_acct_ind(self, test_acct_ind):
        """Sets the test_acct_ind of this AccountDetailsM.

          # noqa: E501

        :param test_acct_ind: The test_acct_ind of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._test_acct_ind = test_acct_ind

    @property
    def taxpayer_id(self):
        """Gets the taxpayer_id of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The taxpayer_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxpayer_id

    @taxpayer_id.setter
    def taxpayer_id(self, taxpayer_id):
        """Sets the taxpayer_id of this AccountDetailsM.

          # noqa: E501

        :param taxpayer_id: The taxpayer_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._taxpayer_id = taxpayer_id

    @property
    def acct_start_date(self):
        """Gets the acct_start_date of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The acct_start_date of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._acct_start_date

    @acct_start_date.setter
    def acct_start_date(self, acct_start_date):
        """Sets the acct_start_date of this AccountDetailsM.

          # noqa: E501

        :param acct_start_date: The acct_start_date of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._acct_start_date = acct_start_date

    @property
    def alt_msg_template_no(self):
        """Gets the alt_msg_template_no of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The alt_msg_template_no of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._alt_msg_template_no

    @alt_msg_template_no.setter
    def alt_msg_template_no(self, alt_msg_template_no):
        """Sets the alt_msg_template_no of this AccountDetailsM.

          # noqa: E501

        :param alt_msg_template_no: The alt_msg_template_no of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._alt_msg_template_no = alt_msg_template_no

    @property
    def seq_func_group_no(self):
        """Gets the seq_func_group_no of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The seq_func_group_no of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._seq_func_group_no

    @seq_func_group_no.setter
    def seq_func_group_no(self, seq_func_group_no):
        """Sets the seq_func_group_no of this AccountDetailsM.

          # noqa: E501

        :param seq_func_group_no: The seq_func_group_no of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._seq_func_group_no = seq_func_group_no

    @property
    def tax_exemption_level(self):
        """Gets the tax_exemption_level of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The tax_exemption_level of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._tax_exemption_level

    @tax_exemption_level.setter
    def tax_exemption_level(self, tax_exemption_level):
        """Sets the tax_exemption_level of this AccountDetailsM.

          # noqa: E501

        :param tax_exemption_level: The tax_exemption_level of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._tax_exemption_level = tax_exemption_level

    @property
    def client_alt_msg_template_id(self):
        """Gets the client_alt_msg_template_id of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The client_alt_msg_template_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._client_alt_msg_template_id

    @client_alt_msg_template_id.setter
    def client_alt_msg_template_id(self, client_alt_msg_template_id):
        """Sets the client_alt_msg_template_id of this AccountDetailsM.

          # noqa: E501

        :param client_alt_msg_template_id: The client_alt_msg_template_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._client_alt_msg_template_id = client_alt_msg_template_id

    @property
    def client_cn_alt_msg_template_id(self):
        """Gets the client_cn_alt_msg_template_id of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The client_cn_alt_msg_template_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._client_cn_alt_msg_template_id

    @client_cn_alt_msg_template_id.setter
    def client_cn_alt_msg_template_id(self, client_cn_alt_msg_template_id):
        """Sets the client_cn_alt_msg_template_id of this AccountDetailsM.

          # noqa: E501

        :param client_cn_alt_msg_template_id: The client_cn_alt_msg_template_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._client_cn_alt_msg_template_id = client_cn_alt_msg_template_id

    @property
    def functional_acct_groups(self):
        """Gets the functional_acct_groups of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The functional_acct_groups of this AccountDetailsM.  # noqa: E501
        :rtype: list[FunctionalAcctGroup]
        """
        return self._functional_acct_groups

    @functional_acct_groups.setter
    def functional_acct_groups(self, functional_acct_groups):
        """Sets the functional_acct_groups of this AccountDetailsM.

          # noqa: E501

        :param functional_acct_groups: The functional_acct_groups of this AccountDetailsM.  # noqa: E501
        :type: list[FunctionalAcctGroup]
        """
        if functional_acct_groups is None:
            raise ValueError("Invalid value for `functional_acct_groups`, must not be `None`")  # noqa: E501

        self._functional_acct_groups = functional_acct_groups

    @property
    def collection_acct_groups(self):
        """Gets the collection_acct_groups of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The collection_acct_groups of this AccountDetailsM.  # noqa: E501
        :rtype: list[CollectionAcctGroup]
        """
        return self._collection_acct_groups

    @collection_acct_groups.setter
    def collection_acct_groups(self, collection_acct_groups):
        """Sets the collection_acct_groups of this AccountDetailsM.

          # noqa: E501

        :param collection_acct_groups: The collection_acct_groups of this AccountDetailsM.  # noqa: E501
        :type: list[CollectionAcctGroup]
        """
        if collection_acct_groups is None:
            raise ValueError("Invalid value for `collection_acct_groups`, must not be `None`")  # noqa: E501

        self._collection_acct_groups = collection_acct_groups

    @property
    def acct_supp_fields(self):
        """Gets the acct_supp_fields of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The acct_supp_fields of this AccountDetailsM.  # noqa: E501
        :rtype: list[AcctSuppField]
        """
        return self._acct_supp_fields

    @acct_supp_fields.setter
    def acct_supp_fields(self, acct_supp_fields):
        """Sets the acct_supp_fields of this AccountDetailsM.

          # noqa: E501

        :param acct_supp_fields: The acct_supp_fields of this AccountDetailsM.  # noqa: E501
        :type: list[AcctSuppField]
        """

        self._acct_supp_fields = acct_supp_fields

    @property
    def surcharge_no(self):
        """Gets the surcharge_no of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The surcharge_no of this AccountDetailsM.  # noqa: E501
        :rtype: list[SurchargeNo]
        """
        return self._surcharge_no

    @surcharge_no.setter
    def surcharge_no(self, surcharge_no):
        """Sets the surcharge_no of this AccountDetailsM.

          # noqa: E501

        :param surcharge_no: The surcharge_no of this AccountDetailsM.  # noqa: E501
        :type: list[SurchargeNo]
        """
        if surcharge_no is None:
            raise ValueError("Invalid value for `surcharge_no`, must not be `None`")  # noqa: E501

        self._surcharge_no = surcharge_no

    @property
    def acct_currency(self):
        """Gets the acct_currency of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The acct_currency of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._acct_currency

    @acct_currency.setter
    def acct_currency(self, acct_currency):
        """Sets the acct_currency of this AccountDetailsM.

          # noqa: E501

        :param acct_currency: The acct_currency of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._acct_currency = acct_currency

    @property
    def acct_balance(self):
        """Gets the acct_balance of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The acct_balance of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._acct_balance

    @acct_balance.setter
    def acct_balance(self, acct_balance):
        """Sets the acct_balance of this AccountDetailsM.

          # noqa: E501

        :param acct_balance: The acct_balance of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._acct_balance = acct_balance

    @property
    def unapplied_payment_summary(self):
        """Gets the unapplied_payment_summary of this AccountDetailsM.  # noqa: E501

        Total sum of unapplied payments for a given account  # noqa: E501

        :return: The unapplied_payment_summary of this AccountDetailsM.  # noqa: E501
        :rtype: float
        """
        return self._unapplied_payment_summary

    @unapplied_payment_summary.setter
    def unapplied_payment_summary(self, unapplied_payment_summary):
        """Sets the unapplied_payment_summary of this AccountDetailsM.

        Total sum of unapplied payments for a given account  # noqa: E501

        :param unapplied_payment_summary: The unapplied_payment_summary of this AccountDetailsM.  # noqa: E501
        :type: float
        """

        self._unapplied_payment_summary = unapplied_payment_summary

    @property
    def address_verification_code(self):
        """Gets the address_verification_code of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The address_verification_code of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._address_verification_code

    @address_verification_code.setter
    def address_verification_code(self, address_verification_code):
        """Sets the address_verification_code of this AccountDetailsM.

          # noqa: E501

        :param address_verification_code: The address_verification_code of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._address_verification_code = address_verification_code

    @property
    def address_match_score(self):
        """Gets the address_match_score of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The address_match_score of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._address_match_score

    @address_match_score.setter
    def address_match_score(self, address_match_score):
        """Sets the address_match_score of this AccountDetailsM.

          # noqa: E501

        :param address_match_score: The address_match_score of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._address_match_score = address_match_score

    @property
    def billing_groups(self):
        """Gets the billing_groups of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The billing_groups of this AccountDetailsM.  # noqa: E501
        :rtype: list[BillingGroup]
        """
        return self._billing_groups

    @billing_groups.setter
    def billing_groups(self, billing_groups):
        """Sets the billing_groups of this AccountDetailsM.

          # noqa: E501

        :param billing_groups: The billing_groups of this AccountDetailsM.  # noqa: E501
        :type: list[BillingGroup]
        """

        self._billing_groups = billing_groups

    @property
    def master_plan_instances(self):
        """Gets the master_plan_instances of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The master_plan_instances of this AccountDetailsM.  # noqa: E501
        :rtype: list[MasterPlanInstance]
        """
        return self._master_plan_instances

    @master_plan_instances.setter
    def master_plan_instances(self, master_plan_instances):
        """Sets the master_plan_instances of this AccountDetailsM.

          # noqa: E501

        :param master_plan_instances: The master_plan_instances of this AccountDetailsM.  # noqa: E501
        :type: list[MasterPlanInstance]
        """

        self._master_plan_instances = master_plan_instances

    @property
    def consumer_acct_ind(self):
        """Gets the consumer_acct_ind of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The consumer_acct_ind of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._consumer_acct_ind

    @consumer_acct_ind.setter
    def consumer_acct_ind(self, consumer_acct_ind):
        """Sets the consumer_acct_ind of this AccountDetailsM.

          # noqa: E501

        :param consumer_acct_ind: The consumer_acct_ind of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._consumer_acct_ind = consumer_acct_ind

    @property
    def po_num(self):
        """Gets the po_num of this AccountDetailsM.  # noqa: E501

        Purchase order number assigned to the account or plan instance.  # noqa: E501

        :return: The po_num of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._po_num

    @po_num.setter
    def po_num(self, po_num):
        """Sets the po_num of this AccountDetailsM.

        Purchase order number assigned to the account or plan instance.  # noqa: E501

        :param po_num: The po_num of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._po_num = po_num

    @property
    def list_start_master_file(self):
        """Gets the list_start_master_file of this AccountDetailsM.  # noqa: E501

        Indicates whether or not the account shall be listed at the start of a master file.  # noqa: E501

        :return: The list_start_master_file of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._list_start_master_file

    @list_start_master_file.setter
    def list_start_master_file(self, list_start_master_file):
        """Sets the list_start_master_file of this AccountDetailsM.

        Indicates whether or not the account shall be listed at the start of a master file.  # noqa: E501

        :param list_start_master_file: The list_start_master_file of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._list_start_master_file = list_start_master_file

    @property
    def matching_contacts(self):
        """Gets the matching_contacts of this AccountDetailsM.  # noqa: E501

          # noqa: E501

        :return: The matching_contacts of this AccountDetailsM.  # noqa: E501
        :rtype: list[MatchingContact]
        """
        return self._matching_contacts

    @matching_contacts.setter
    def matching_contacts(self, matching_contacts):
        """Sets the matching_contacts of this AccountDetailsM.

          # noqa: E501

        :param matching_contacts: The matching_contacts of this AccountDetailsM.  # noqa: E501
        :type: list[MatchingContact]
        """

        self._matching_contacts = matching_contacts

    @property
    def legal_entity_no(self):
        """Gets the legal_entity_no of this AccountDetailsM.  # noqa: E501

        Aria-assigned legal entity identification number.  # noqa: E501

        :return: The legal_entity_no of this AccountDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._legal_entity_no

    @legal_entity_no.setter
    def legal_entity_no(self, legal_entity_no):
        """Sets the legal_entity_no of this AccountDetailsM.

        Aria-assigned legal entity identification number.  # noqa: E501

        :param legal_entity_no: The legal_entity_no of this AccountDetailsM.  # noqa: E501
        :type: int
        """

        self._legal_entity_no = legal_entity_no

    @property
    def legal_entity_name(self):
        """Gets the legal_entity_name of this AccountDetailsM.  # noqa: E501

        Client-assigned descriptor of the legal entity.  # noqa: E501

        :return: The legal_entity_name of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._legal_entity_name

    @legal_entity_name.setter
    def legal_entity_name(self, legal_entity_name):
        """Sets the legal_entity_name of this AccountDetailsM.

        Client-assigned descriptor of the legal entity.  # noqa: E501

        :param legal_entity_name: The legal_entity_name of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._legal_entity_name = legal_entity_name

    @property
    def client_legal_entity_id(self):
        """Gets the client_legal_entity_id of this AccountDetailsM.  # noqa: E501

        Client-assigned unique identifier for the legal entity.  # noqa: E501

        :return: The client_legal_entity_id of this AccountDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._client_legal_entity_id

    @client_legal_entity_id.setter
    def client_legal_entity_id(self, client_legal_entity_id):
        """Sets the client_legal_entity_id of this AccountDetailsM.

        Client-assigned unique identifier for the legal entity.  # noqa: E501

        :param client_legal_entity_id: The client_legal_entity_id of this AccountDetailsM.  # noqa: E501
        :type: str
        """

        self._client_legal_entity_id = client_legal_entity_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetailsM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
