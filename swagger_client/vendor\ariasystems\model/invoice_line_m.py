# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.vendor\ariasystems\model.invoice_line_tax_m import InvoiceLineTaxM  # noqa: F401,E501


class InvoiceLineM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line_item_no': 'int',
        'amount': 'float',
        'comments': 'str',
        'plan_name': 'str',
        'plan_no': 'int',
        'service_name': 'str',
        'service_no': 'int',
        'ledger_code': 'str',
        'coa_id': 'int',
        'coa_description': 'str',
        'usage_units': 'float',
        'usage_rate': 'float',
        'usage_type_no': 'float',
        'start_date': 'str',
        'end_date': 'str',
        'client_sku': 'str',
        'order_no': 'int',
        'item_no': 'int',
        'base_plan_units': 'int',
        'plan_units_change': 'float',
        'proration_factor': 'float',
        'proration_text': 'str',
        'adv_billing_period_total_days': 'int',
        'proration_remaining_days': 'int',
        'proration_description': 'str',
        'bill_from_address_no': 'int',
        'ship_from_address_no': 'int',
        'bill_to_address_no': 'int',
        'ship_to_address_no': 'int',
        'transaction_type': 'str',
        'master_plan_instance_id': 'int',
        'client_master_plan_instance_id': 'str',
        'invoice_transaction_id': 'int',
        'po_num': 'str',
        'invoice_line_tax_m': 'list[InvoiceLineTaxM]',
        'rate_schedule_no': 'float',
        'rate_schedule_tier_no': 'float'
    }

    attribute_map = {
        'line_item_no': 'line_item_no',
        'amount': 'amount',
        'comments': 'comments',
        'plan_name': 'plan_name',
        'plan_no': 'plan_no',
        'service_name': 'service_name',
        'service_no': 'service_no',
        'ledger_code': 'ledger_code',
        'coa_id': 'coa_id',
        'coa_description': 'coa_description',
        'usage_units': 'usage_units',
        'usage_rate': 'usage_rate',
        'usage_type_no': 'usage_type_no',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'client_sku': 'client_sku',
        'order_no': 'order_no',
        'item_no': 'item_no',
        'base_plan_units': 'base_plan_units',
        'plan_units_change': 'plan_units_change',
        'proration_factor': 'proration_factor',
        'proration_text': 'proration_text',
        'adv_billing_period_total_days': 'adv_billing_period_total_days',
        'proration_remaining_days': 'proration_remaining_days',
        'proration_description': 'proration_description',
        'bill_from_address_no': 'bill_from_address_no',
        'ship_from_address_no': 'ship_from_address_no',
        'bill_to_address_no': 'bill_to_address_no',
        'ship_to_address_no': 'ship_to_address_no',
        'transaction_type': 'transaction_type',
        'master_plan_instance_id': 'master_plan_instance_id',
        'client_master_plan_instance_id': 'client_master_plan_instance_id',
        'invoice_transaction_id': 'invoice_transaction_id',
        'po_num': 'po_num',
        'invoice_line_tax_m': 'invoice_line_tax_m',
        'rate_schedule_no': 'rate_schedule_no',
        'rate_schedule_tier_no': 'rate_schedule_tier_no'
    }

    def __init__(self, line_item_no=None, amount=None, comments=None, plan_name=None, plan_no=None, service_name=None, service_no=None, ledger_code=None, coa_id=None, coa_description=None, usage_units=None, usage_rate=None, usage_type_no=None, start_date=None, end_date=None, client_sku=None, order_no=None, item_no=None, base_plan_units=None, plan_units_change=None, proration_factor=None, proration_text=None, adv_billing_period_total_days=None, proration_remaining_days=None, proration_description=None, bill_from_address_no=None, ship_from_address_no=None, bill_to_address_no=None, ship_to_address_no=None, transaction_type=None, master_plan_instance_id=None, client_master_plan_instance_id=None, invoice_transaction_id=None, po_num=None, invoice_line_tax_m=None, rate_schedule_no=None, rate_schedule_tier_no=None):  # noqa: E501
        """InvoiceLineM - a model defined in Swagger"""  # noqa: E501

        self._line_item_no = None
        self._amount = None
        self._comments = None
        self._plan_name = None
        self._plan_no = None
        self._service_name = None
        self._service_no = None
        self._ledger_code = None
        self._coa_id = None
        self._coa_description = None
        self._usage_units = None
        self._usage_rate = None
        self._usage_type_no = None
        self._start_date = None
        self._end_date = None
        self._client_sku = None
        self._order_no = None
        self._item_no = None
        self._base_plan_units = None
        self._plan_units_change = None
        self._proration_factor = None
        self._proration_text = None
        self._adv_billing_period_total_days = None
        self._proration_remaining_days = None
        self._proration_description = None
        self._bill_from_address_no = None
        self._ship_from_address_no = None
        self._bill_to_address_no = None
        self._ship_to_address_no = None
        self._transaction_type = None
        self._master_plan_instance_id = None
        self._client_master_plan_instance_id = None
        self._invoice_transaction_id = None
        self._po_num = None
        self._invoice_line_tax_m = None
        self._rate_schedule_no = None
        self._rate_schedule_tier_no = None
        self.discriminator = None

        if line_item_no is not None:
            self.line_item_no = line_item_no
        if amount is not None:
            self.amount = amount
        if comments is not None:
            self.comments = comments
        if plan_name is not None:
            self.plan_name = plan_name
        if plan_no is not None:
            self.plan_no = plan_no
        if service_name is not None:
            self.service_name = service_name
        if service_no is not None:
            self.service_no = service_no
        if ledger_code is not None:
            self.ledger_code = ledger_code
        if coa_id is not None:
            self.coa_id = coa_id
        if coa_description is not None:
            self.coa_description = coa_description
        if usage_units is not None:
            self.usage_units = usage_units
        if usage_rate is not None:
            self.usage_rate = usage_rate
        if usage_type_no is not None:
            self.usage_type_no = usage_type_no
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if client_sku is not None:
            self.client_sku = client_sku
        if order_no is not None:
            self.order_no = order_no
        if item_no is not None:
            self.item_no = item_no
        if base_plan_units is not None:
            self.base_plan_units = base_plan_units
        if plan_units_change is not None:
            self.plan_units_change = plan_units_change
        if proration_factor is not None:
            self.proration_factor = proration_factor
        if proration_text is not None:
            self.proration_text = proration_text
        if adv_billing_period_total_days is not None:
            self.adv_billing_period_total_days = adv_billing_period_total_days
        if proration_remaining_days is not None:
            self.proration_remaining_days = proration_remaining_days
        if proration_description is not None:
            self.proration_description = proration_description
        if bill_from_address_no is not None:
            self.bill_from_address_no = bill_from_address_no
        if ship_from_address_no is not None:
            self.ship_from_address_no = ship_from_address_no
        if bill_to_address_no is not None:
            self.bill_to_address_no = bill_to_address_no
        if ship_to_address_no is not None:
            self.ship_to_address_no = ship_to_address_no
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if master_plan_instance_id is not None:
            self.master_plan_instance_id = master_plan_instance_id
        if client_master_plan_instance_id is not None:
            self.client_master_plan_instance_id = client_master_plan_instance_id
        if invoice_transaction_id is not None:
            self.invoice_transaction_id = invoice_transaction_id
        if po_num is not None:
            self.po_num = po_num
        if invoice_line_tax_m is not None:
            self.invoice_line_tax_m = invoice_line_tax_m
        if rate_schedule_no is not None:
            self.rate_schedule_no = rate_schedule_no
        if rate_schedule_tier_no is not None:
            self.rate_schedule_tier_no = rate_schedule_tier_no

    @property
    def line_item_no(self):
        """Gets the line_item_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The line_item_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._line_item_no

    @line_item_no.setter
    def line_item_no(self, line_item_no):
        """Sets the line_item_no of this InvoiceLineM.

          # noqa: E501

        :param line_item_no: The line_item_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._line_item_no = line_item_no

    @property
    def amount(self):
        """Gets the amount of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The amount of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceLineM.

          # noqa: E501

        :param amount: The amount of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def comments(self):
        """Gets the comments of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The comments of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InvoiceLineM.

          # noqa: E501

        :param comments: The comments of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def plan_name(self):
        """Gets the plan_name of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The plan_name of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this InvoiceLineM.

          # noqa: E501

        :param plan_name: The plan_name of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._plan_name = plan_name

    @property
    def plan_no(self):
        """Gets the plan_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The plan_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._plan_no

    @plan_no.setter
    def plan_no(self, plan_no):
        """Sets the plan_no of this InvoiceLineM.

          # noqa: E501

        :param plan_no: The plan_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._plan_no = plan_no

    @property
    def service_name(self):
        """Gets the service_name of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The service_name of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this InvoiceLineM.

          # noqa: E501

        :param service_name: The service_name of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def service_no(self):
        """Gets the service_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The service_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._service_no

    @service_no.setter
    def service_no(self, service_no):
        """Sets the service_no of this InvoiceLineM.

          # noqa: E501

        :param service_no: The service_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._service_no = service_no

    @property
    def ledger_code(self):
        """Gets the ledger_code of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The ledger_code of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._ledger_code

    @ledger_code.setter
    def ledger_code(self, ledger_code):
        """Sets the ledger_code of this InvoiceLineM.

          # noqa: E501

        :param ledger_code: The ledger_code of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._ledger_code = ledger_code

    @property
    def coa_id(self):
        """Gets the coa_id of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The coa_id of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._coa_id

    @coa_id.setter
    def coa_id(self, coa_id):
        """Sets the coa_id of this InvoiceLineM.

          # noqa: E501

        :param coa_id: The coa_id of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._coa_id = coa_id

    @property
    def coa_description(self):
        """Gets the coa_description of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The coa_description of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._coa_description

    @coa_description.setter
    def coa_description(self, coa_description):
        """Sets the coa_description of this InvoiceLineM.

          # noqa: E501

        :param coa_description: The coa_description of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._coa_description = coa_description

    @property
    def usage_units(self):
        """Gets the usage_units of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The usage_units of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._usage_units

    @usage_units.setter
    def usage_units(self, usage_units):
        """Sets the usage_units of this InvoiceLineM.

          # noqa: E501

        :param usage_units: The usage_units of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._usage_units = usage_units

    @property
    def usage_rate(self):
        """Gets the usage_rate of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The usage_rate of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._usage_rate

    @usage_rate.setter
    def usage_rate(self, usage_rate):
        """Sets the usage_rate of this InvoiceLineM.

          # noqa: E501

        :param usage_rate: The usage_rate of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._usage_rate = usage_rate

    @property
    def usage_type_no(self):
        """Gets the usage_type_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The usage_type_no of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._usage_type_no

    @usage_type_no.setter
    def usage_type_no(self, usage_type_no):
        """Sets the usage_type_no of this InvoiceLineM.

          # noqa: E501

        :param usage_type_no: The usage_type_no of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._usage_type_no = usage_type_no

    @property
    def start_date(self):
        """Gets the start_date of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The start_date of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InvoiceLineM.

          # noqa: E501

        :param start_date: The start_date of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The end_date of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InvoiceLineM.

          # noqa: E501

        :param end_date: The end_date of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def client_sku(self):
        """Gets the client_sku of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The client_sku of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._client_sku

    @client_sku.setter
    def client_sku(self, client_sku):
        """Sets the client_sku of this InvoiceLineM.

          # noqa: E501

        :param client_sku: The client_sku of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._client_sku = client_sku

    @property
    def order_no(self):
        """Gets the order_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The order_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this InvoiceLineM.

          # noqa: E501

        :param order_no: The order_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._order_no = order_no

    @property
    def item_no(self):
        """Gets the item_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The item_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._item_no

    @item_no.setter
    def item_no(self, item_no):
        """Sets the item_no of this InvoiceLineM.

          # noqa: E501

        :param item_no: The item_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._item_no = item_no

    @property
    def base_plan_units(self):
        """Gets the base_plan_units of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The base_plan_units of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._base_plan_units

    @base_plan_units.setter
    def base_plan_units(self, base_plan_units):
        """Sets the base_plan_units of this InvoiceLineM.

          # noqa: E501

        :param base_plan_units: The base_plan_units of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._base_plan_units = base_plan_units

    @property
    def plan_units_change(self):
        """Gets the plan_units_change of this InvoiceLineM.  # noqa: E501

        Number of units changed because of an upgrade or downgrade to a plan.  For an upgrade from 1 unit to 3 units,  this would return a value of 2.  The calculation is ?base plan units minus prior base plan units?. This value  will only be calculated if both values are present.   # noqa: E501

        :return: The plan_units_change of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._plan_units_change

    @plan_units_change.setter
    def plan_units_change(self, plan_units_change):
        """Sets the plan_units_change of this InvoiceLineM.

        Number of units changed because of an upgrade or downgrade to a plan.  For an upgrade from 1 unit to 3 units,  this would return a value of 2.  The calculation is ?base plan units minus prior base plan units?. This value  will only be calculated if both values are present.   # noqa: E501

        :param plan_units_change: The plan_units_change of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._plan_units_change = plan_units_change

    @property
    def proration_factor(self):
        """Gets the proration_factor of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The proration_factor of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._proration_factor

    @proration_factor.setter
    def proration_factor(self, proration_factor):
        """Sets the proration_factor of this InvoiceLineM.

          # noqa: E501

        :param proration_factor: The proration_factor of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._proration_factor = proration_factor

    @property
    def proration_text(self):
        """Gets the proration_text of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The proration_text of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._proration_text

    @proration_text.setter
    def proration_text(self, proration_text):
        """Sets the proration_text of this InvoiceLineM.

          # noqa: E501

        :param proration_text: The proration_text of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._proration_text = proration_text

    @property
    def adv_billing_period_total_days(self):
        """Gets the adv_billing_period_total_days of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The adv_billing_period_total_days of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._adv_billing_period_total_days

    @adv_billing_period_total_days.setter
    def adv_billing_period_total_days(self, adv_billing_period_total_days):
        """Sets the adv_billing_period_total_days of this InvoiceLineM.

          # noqa: E501

        :param adv_billing_period_total_days: The adv_billing_period_total_days of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._adv_billing_period_total_days = adv_billing_period_total_days

    @property
    def proration_remaining_days(self):
        """Gets the proration_remaining_days of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The proration_remaining_days of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._proration_remaining_days

    @proration_remaining_days.setter
    def proration_remaining_days(self, proration_remaining_days):
        """Sets the proration_remaining_days of this InvoiceLineM.

          # noqa: E501

        :param proration_remaining_days: The proration_remaining_days of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._proration_remaining_days = proration_remaining_days

    @property
    def proration_description(self):
        """Gets the proration_description of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The proration_description of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._proration_description

    @proration_description.setter
    def proration_description(self, proration_description):
        """Sets the proration_description of this InvoiceLineM.

          # noqa: E501

        :param proration_description: The proration_description of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._proration_description = proration_description

    @property
    def bill_from_address_no(self):
        """Gets the bill_from_address_no of this InvoiceLineM.  # noqa: E501

        Address sent as the bill-from address to the tax engine for tax calculations.  Depending on the taxation configuration, this parameter may return the Aria-assigned  unique identifier of the service location for the invoice line item. Note that service locations can be associated with a service for a given plan instance on an account,  with an item (NSO) purchased as part of a one-time order, or with a service as defined in the product catalog.   # noqa: E501

        :return: The bill_from_address_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._bill_from_address_no

    @bill_from_address_no.setter
    def bill_from_address_no(self, bill_from_address_no):
        """Sets the bill_from_address_no of this InvoiceLineM.

        Address sent as the bill-from address to the tax engine for tax calculations.  Depending on the taxation configuration, this parameter may return the Aria-assigned  unique identifier of the service location for the invoice line item. Note that service locations can be associated with a service for a given plan instance on an account,  with an item (NSO) purchased as part of a one-time order, or with a service as defined in the product catalog.   # noqa: E501

        :param bill_from_address_no: The bill_from_address_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._bill_from_address_no = bill_from_address_no

    @property
    def ship_from_address_no(self):
        """Gets the ship_from_address_no of this InvoiceLineM.  # noqa: E501

        Address sent as the ship-from address to the tax engine for tax calculations.  Depending on the taxation configuration, this parameter may return the Aria-assigned unique identifier of the service location for the invoice line item. Note that service locations can be associated with a service for a given plan instance on an account,  with an item (NSO) purchased as part of a one-time order, or with a service as defined in the product catalog.   # noqa: E501

        :return: The ship_from_address_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._ship_from_address_no

    @ship_from_address_no.setter
    def ship_from_address_no(self, ship_from_address_no):
        """Sets the ship_from_address_no of this InvoiceLineM.

        Address sent as the ship-from address to the tax engine for tax calculations.  Depending on the taxation configuration, this parameter may return the Aria-assigned unique identifier of the service location for the invoice line item. Note that service locations can be associated with a service for a given plan instance on an account,  with an item (NSO) purchased as part of a one-time order, or with a service as defined in the product catalog.   # noqa: E501

        :param ship_from_address_no: The ship_from_address_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._ship_from_address_no = ship_from_address_no

    @property
    def bill_to_address_no(self):
        """Gets the bill_to_address_no of this InvoiceLineM.  # noqa: E501

        Address sent as the bill-to address to the tax engine for tax calculations. This parameter will  return the Aria-assigned unique identifier of the contact on the account used as the  bill-to address for the invoice line item.   # noqa: E501

        :return: The bill_to_address_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._bill_to_address_no

    @bill_to_address_no.setter
    def bill_to_address_no(self, bill_to_address_no):
        """Sets the bill_to_address_no of this InvoiceLineM.

        Address sent as the bill-to address to the tax engine for tax calculations. This parameter will  return the Aria-assigned unique identifier of the contact on the account used as the  bill-to address for the invoice line item.   # noqa: E501

        :param bill_to_address_no: The bill_to_address_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._bill_to_address_no = bill_to_address_no

    @property
    def ship_to_address_no(self):
        """Gets the ship_to_address_no of this InvoiceLineM.  # noqa: E501

        Address sent as the ship-to address to the tax engine for tax calculations.  This parameter will return the Aria-assigned unique identifier of the contact on the account used  as the ship-to address for the invoice line item   # noqa: E501

        :return: The ship_to_address_no of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._ship_to_address_no

    @ship_to_address_no.setter
    def ship_to_address_no(self, ship_to_address_no):
        """Sets the ship_to_address_no of this InvoiceLineM.

        Address sent as the ship-to address to the tax engine for tax calculations.  This parameter will return the Aria-assigned unique identifier of the contact on the account used  as the ship-to address for the invoice line item   # noqa: E501

        :param ship_to_address_no: The ship_to_address_no of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._ship_to_address_no = ship_to_address_no

    @property
    def transaction_type(self):
        """Gets the transaction_type of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The transaction_type of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this InvoiceLineM.

          # noqa: E501

        :param transaction_type: The transaction_type of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def master_plan_instance_id(self):
        """Gets the master_plan_instance_id of this InvoiceLineM.  # noqa: E501

        Aria generated unique identifier for the master plan instance  # noqa: E501

        :return: The master_plan_instance_id of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._master_plan_instance_id

    @master_plan_instance_id.setter
    def master_plan_instance_id(self, master_plan_instance_id):
        """Sets the master_plan_instance_id of this InvoiceLineM.

        Aria generated unique identifier for the master plan instance  # noqa: E501

        :param master_plan_instance_id: The master_plan_instance_id of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._master_plan_instance_id = master_plan_instance_id

    @property
    def client_master_plan_instance_id(self):
        """Gets the client_master_plan_instance_id of this InvoiceLineM.  # noqa: E501

        Client defined unique identifier for the master plan instance  # noqa: E501

        :return: The client_master_plan_instance_id of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._client_master_plan_instance_id

    @client_master_plan_instance_id.setter
    def client_master_plan_instance_id(self, client_master_plan_instance_id):
        """Sets the client_master_plan_instance_id of this InvoiceLineM.

        Client defined unique identifier for the master plan instance  # noqa: E501

        :param client_master_plan_instance_id: The client_master_plan_instance_id of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._client_master_plan_instance_id = client_master_plan_instance_id

    @property
    def invoice_transaction_id(self):
        """Gets the invoice_transaction_id of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The invoice_transaction_id of this InvoiceLineM.  # noqa: E501
        :rtype: int
        """
        return self._invoice_transaction_id

    @invoice_transaction_id.setter
    def invoice_transaction_id(self, invoice_transaction_id):
        """Sets the invoice_transaction_id of this InvoiceLineM.

          # noqa: E501

        :param invoice_transaction_id: The invoice_transaction_id of this InvoiceLineM.  # noqa: E501
        :type: int
        """

        self._invoice_transaction_id = invoice_transaction_id

    @property
    def po_num(self):
        """Gets the po_num of this InvoiceLineM.  # noqa: E501

        Purchase order number assigned to the invoice.  # noqa: E501

        :return: The po_num of this InvoiceLineM.  # noqa: E501
        :rtype: str
        """
        return self._po_num

    @po_num.setter
    def po_num(self, po_num):
        """Sets the po_num of this InvoiceLineM.

        Purchase order number assigned to the invoice.  # noqa: E501

        :param po_num: The po_num of this InvoiceLineM.  # noqa: E501
        :type: str
        """

        self._po_num = po_num

    @property
    def invoice_line_tax_m(self):
        """Gets the invoice_line_tax_m of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The invoice_line_tax_m of this InvoiceLineM.  # noqa: E501
        :rtype: list[InvoiceLineTaxM]
        """
        return self._invoice_line_tax_m

    @invoice_line_tax_m.setter
    def invoice_line_tax_m(self, invoice_line_tax_m):
        """Sets the invoice_line_tax_m of this InvoiceLineM.

          # noqa: E501

        :param invoice_line_tax_m: The invoice_line_tax_m of this InvoiceLineM.  # noqa: E501
        :type: list[InvoiceLineTaxM]
        """

        self._invoice_line_tax_m = invoice_line_tax_m

    @property
    def rate_schedule_no(self):
        """Gets the rate_schedule_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The rate_schedule_no of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._rate_schedule_no

    @rate_schedule_no.setter
    def rate_schedule_no(self, rate_schedule_no):
        """Sets the rate_schedule_no of this InvoiceLineM.

          # noqa: E501

        :param rate_schedule_no: The rate_schedule_no of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._rate_schedule_no = rate_schedule_no

    @property
    def rate_schedule_tier_no(self):
        """Gets the rate_schedule_tier_no of this InvoiceLineM.  # noqa: E501

          # noqa: E501

        :return: The rate_schedule_tier_no of this InvoiceLineM.  # noqa: E501
        :rtype: float
        """
        return self._rate_schedule_tier_no

    @rate_schedule_tier_no.setter
    def rate_schedule_tier_no(self, rate_schedule_tier_no):
        """Sets the rate_schedule_tier_no of this InvoiceLineM.

          # noqa: E501

        :param rate_schedule_tier_no: The rate_schedule_tier_no of this InvoiceLineM.  # noqa: E501
        :type: float
        """

        self._rate_schedule_tier_no = rate_schedule_tier_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceLineM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
