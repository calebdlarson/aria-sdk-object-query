# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'str',
        'description': 'str',
        'units': 'float',
        'unit_price': 'float',
        'subtotal': 'float'
    }

    attribute_map = {
        'sku': 'sku',
        'description': 'description',
        'units': 'units',
        'unit_price': 'unit_price',
        'subtotal': 'subtotal'
    }

    def __init__(self, sku=None, description=None, units=None, unit_price=None, subtotal=None):  # noqa: E501
        """OrderItem - a model defined in Swagger"""  # noqa: E501

        self._sku = None
        self._description = None
        self._units = None
        self._unit_price = None
        self._subtotal = None
        self.discriminator = None

        self.sku = sku
        if description is not None:
            self.description = description
        self.units = units
        self.unit_price = unit_price
        self.subtotal = subtotal

    @property
    def sku(self):
        """Gets the sku of this OrderItem.  # noqa: E501

          # noqa: E501

        :return: The sku of this OrderItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this OrderItem.

          # noqa: E501

        :param sku: The sku of this OrderItem.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def description(self):
        """Gets the description of this OrderItem.  # noqa: E501

          # noqa: E501

        :return: The description of this OrderItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrderItem.

          # noqa: E501

        :param description: The description of this OrderItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def units(self):
        """Gets the units of this OrderItem.  # noqa: E501

          # noqa: E501

        :return: The units of this OrderItem.  # noqa: E501
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this OrderItem.

          # noqa: E501

        :param units: The units of this OrderItem.  # noqa: E501
        :type: float
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def unit_price(self):
        """Gets the unit_price of this OrderItem.  # noqa: E501

          # noqa: E501

        :return: The unit_price of this OrderItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this OrderItem.

          # noqa: E501

        :param unit_price: The unit_price of this OrderItem.  # noqa: E501
        :type: float
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def subtotal(self):
        """Gets the subtotal of this OrderItem.  # noqa: E501

          # noqa: E501

        :return: The subtotal of this OrderItem.  # noqa: E501
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this OrderItem.

          # noqa: E501

        :param subtotal: The subtotal of this OrderItem.  # noqa: E501
        :type: float
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")  # noqa: E501

        self._subtotal = subtotal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
