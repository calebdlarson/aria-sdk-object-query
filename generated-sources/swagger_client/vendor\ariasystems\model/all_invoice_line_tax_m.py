# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AllInvoiceLineTaxM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tax_id': 'int',
        'amount': 'float',
        'before_credit_amount': 'float',
        'jurisdiction': 'str',
        'description': 'str',
        'is_excluded': 'int'
    }

    attribute_map = {
        'tax_id': 'tax_id',
        'amount': 'amount',
        'before_credit_amount': 'before_credit_amount',
        'jurisdiction': 'jurisdiction',
        'description': 'description',
        'is_excluded': 'is_excluded'
    }

    def __init__(self, tax_id=None, amount=None, before_credit_amount=None, jurisdiction=None, description=None, is_excluded=None):  # noqa: E501
        """AllInvoiceLineTaxM - a model defined in Swagger"""  # noqa: E501

        self._tax_id = None
        self._amount = None
        self._before_credit_amount = None
        self._jurisdiction = None
        self._description = None
        self._is_excluded = None
        self.discriminator = None

        if tax_id is not None:
            self.tax_id = tax_id
        if amount is not None:
            self.amount = amount
        if before_credit_amount is not None:
            self.before_credit_amount = before_credit_amount
        if jurisdiction is not None:
            self.jurisdiction = jurisdiction
        if description is not None:
            self.description = description
        if is_excluded is not None:
            self.is_excluded = is_excluded

    @property
    def tax_id(self):
        """Gets the tax_id of this AllInvoiceLineTaxM.  # noqa: E501

          # noqa: E501

        :return: The tax_id of this AllInvoiceLineTaxM.  # noqa: E501
        :rtype: int
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this AllInvoiceLineTaxM.

          # noqa: E501

        :param tax_id: The tax_id of this AllInvoiceLineTaxM.  # noqa: E501
        :type: int
        """

        self._tax_id = tax_id

    @property
    def amount(self):
        """Gets the amount of this AllInvoiceLineTaxM.  # noqa: E501

          # noqa: E501

        :return: The amount of this AllInvoiceLineTaxM.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AllInvoiceLineTaxM.

          # noqa: E501

        :param amount: The amount of this AllInvoiceLineTaxM.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def before_credit_amount(self):
        """Gets the before_credit_amount of this AllInvoiceLineTaxM.  # noqa: E501

          # noqa: E501

        :return: The before_credit_amount of this AllInvoiceLineTaxM.  # noqa: E501
        :rtype: float
        """
        return self._before_credit_amount

    @before_credit_amount.setter
    def before_credit_amount(self, before_credit_amount):
        """Sets the before_credit_amount of this AllInvoiceLineTaxM.

          # noqa: E501

        :param before_credit_amount: The before_credit_amount of this AllInvoiceLineTaxM.  # noqa: E501
        :type: float
        """

        self._before_credit_amount = before_credit_amount

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this AllInvoiceLineTaxM.  # noqa: E501

          # noqa: E501

        :return: The jurisdiction of this AllInvoiceLineTaxM.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this AllInvoiceLineTaxM.

          # noqa: E501

        :param jurisdiction: The jurisdiction of this AllInvoiceLineTaxM.  # noqa: E501
        :type: str
        """

        self._jurisdiction = jurisdiction

    @property
    def description(self):
        """Gets the description of this AllInvoiceLineTaxM.  # noqa: E501

          # noqa: E501

        :return: The description of this AllInvoiceLineTaxM.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AllInvoiceLineTaxM.

          # noqa: E501

        :param description: The description of this AllInvoiceLineTaxM.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_excluded(self):
        """Gets the is_excluded of this AllInvoiceLineTaxM.  # noqa: E501

          # noqa: E501

        :return: The is_excluded of this AllInvoiceLineTaxM.  # noqa: E501
        :rtype: int
        """
        return self._is_excluded

    @is_excluded.setter
    def is_excluded(self, is_excluded):
        """Sets the is_excluded of this AllInvoiceLineTaxM.

          # noqa: E501

        :param is_excluded: The is_excluded of this AllInvoiceLineTaxM.  # noqa: E501
        :type: int
        """

        self._is_excluded = is_excluded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllInvoiceLineTaxM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
