# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MatchingContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'matching_billing_contact_id_number': 'int',
        'matching_statement_contact_id_number': 'int',
        'matching_account_contact_id_number': 'int',
        'matching_destination_contact_order_id_number': 'int',
        'matching_destination_contact_service_id_number': 'int',
        'matching_inactive_contact_id_number': 'int'
    }

    attribute_map = {
        'matching_billing_contact_id_number': 'matching_billing_contact_id_number',
        'matching_statement_contact_id_number': 'matching_statement_contact_id_number',
        'matching_account_contact_id_number': 'matching_account_contact_id_number',
        'matching_destination_contact_order_id_number': 'matching_destination_contact_order_id_number',
        'matching_destination_contact_service_id_number': 'matching_destination_contact_service_id_number',
        'matching_inactive_contact_id_number': 'matching_inactive_contact_id_number'
    }

    def __init__(self, matching_billing_contact_id_number=None, matching_statement_contact_id_number=None, matching_account_contact_id_number=None, matching_destination_contact_order_id_number=None, matching_destination_contact_service_id_number=None, matching_inactive_contact_id_number=None):  # noqa: E501
        """MatchingContact - a model defined in Swagger"""  # noqa: E501

        self._matching_billing_contact_id_number = None
        self._matching_statement_contact_id_number = None
        self._matching_account_contact_id_number = None
        self._matching_destination_contact_order_id_number = None
        self._matching_destination_contact_service_id_number = None
        self._matching_inactive_contact_id_number = None
        self.discriminator = None

        if matching_billing_contact_id_number is not None:
            self.matching_billing_contact_id_number = matching_billing_contact_id_number
        if matching_statement_contact_id_number is not None:
            self.matching_statement_contact_id_number = matching_statement_contact_id_number
        if matching_account_contact_id_number is not None:
            self.matching_account_contact_id_number = matching_account_contact_id_number
        if matching_destination_contact_order_id_number is not None:
            self.matching_destination_contact_order_id_number = matching_destination_contact_order_id_number
        if matching_destination_contact_service_id_number is not None:
            self.matching_destination_contact_service_id_number = matching_destination_contact_service_id_number
        if matching_inactive_contact_id_number is not None:
            self.matching_inactive_contact_id_number = matching_inactive_contact_id_number

    @property
    def matching_billing_contact_id_number(self):
        """Gets the matching_billing_contact_id_number of this MatchingContact.  # noqa: E501

        This output displays all Aria-assigned unique identifiers for all billing contacts that match the contact search criteria entered. The get_acct_contacts_m API can be used to reference contact information for each matching contact. If no contact-specific search criteria was input, then all billing contact ID numbers for the account are displayed.   # noqa: E501

        :return: The matching_billing_contact_id_number of this MatchingContact.  # noqa: E501
        :rtype: int
        """
        return self._matching_billing_contact_id_number

    @matching_billing_contact_id_number.setter
    def matching_billing_contact_id_number(self, matching_billing_contact_id_number):
        """Sets the matching_billing_contact_id_number of this MatchingContact.

        This output displays all Aria-assigned unique identifiers for all billing contacts that match the contact search criteria entered. The get_acct_contacts_m API can be used to reference contact information for each matching contact. If no contact-specific search criteria was input, then all billing contact ID numbers for the account are displayed.   # noqa: E501

        :param matching_billing_contact_id_number: The matching_billing_contact_id_number of this MatchingContact.  # noqa: E501
        :type: int
        """

        self._matching_billing_contact_id_number = matching_billing_contact_id_number

    @property
    def matching_statement_contact_id_number(self):
        """Gets the matching_statement_contact_id_number of this MatchingContact.  # noqa: E501

        This output displays all Aria-assigned unique identifiers for all statement contacts that match the contact search criteria entered. The get_acct_contacts_m API can be used to reference contact information for each matching contact. If no contact-specific search criteria was input, then all statement contact ID numbers for the account are displayed.   # noqa: E501

        :return: The matching_statement_contact_id_number of this MatchingContact.  # noqa: E501
        :rtype: int
        """
        return self._matching_statement_contact_id_number

    @matching_statement_contact_id_number.setter
    def matching_statement_contact_id_number(self, matching_statement_contact_id_number):
        """Sets the matching_statement_contact_id_number of this MatchingContact.

        This output displays all Aria-assigned unique identifiers for all statement contacts that match the contact search criteria entered. The get_acct_contacts_m API can be used to reference contact information for each matching contact. If no contact-specific search criteria was input, then all statement contact ID numbers for the account are displayed.   # noqa: E501

        :param matching_statement_contact_id_number: The matching_statement_contact_id_number of this MatchingContact.  # noqa: E501
        :type: int
        """

        self._matching_statement_contact_id_number = matching_statement_contact_id_number

    @property
    def matching_account_contact_id_number(self):
        """Gets the matching_account_contact_id_number of this MatchingContact.  # noqa: E501

        This output displays all Aria-assigned unique identifiers for all account contacts that match the contact search criteria entered. The get_acct_contacts_m API can be used to review details for each matching contact. If no contact-specific search criteria was input, then all account contact ID numbers for the account are displayed.   # noqa: E501

        :return: The matching_account_contact_id_number of this MatchingContact.  # noqa: E501
        :rtype: int
        """
        return self._matching_account_contact_id_number

    @matching_account_contact_id_number.setter
    def matching_account_contact_id_number(self, matching_account_contact_id_number):
        """Sets the matching_account_contact_id_number of this MatchingContact.

        This output displays all Aria-assigned unique identifiers for all account contacts that match the contact search criteria entered. The get_acct_contacts_m API can be used to review details for each matching contact. If no contact-specific search criteria was input, then all account contact ID numbers for the account are displayed.   # noqa: E501

        :param matching_account_contact_id_number: The matching_account_contact_id_number of this MatchingContact.  # noqa: E501
        :type: int
        """

        self._matching_account_contact_id_number = matching_account_contact_id_number

    @property
    def matching_destination_contact_order_id_number(self):
        """Gets the matching_destination_contact_order_id_number of this MatchingContact.  # noqa: E501

        This output displays all Aria-assigned unique identifiers for all destination contacts, related to orders, which match the contact search criteria entered. The get_acct_contacts_m API can be used to reference contact information for each matching contact. If no contact-specific search criteria was input, then all destination contact order ID numbers for the account are displayed.   # noqa: E501

        :return: The matching_destination_contact_order_id_number of this MatchingContact.  # noqa: E501
        :rtype: int
        """
        return self._matching_destination_contact_order_id_number

    @matching_destination_contact_order_id_number.setter
    def matching_destination_contact_order_id_number(self, matching_destination_contact_order_id_number):
        """Sets the matching_destination_contact_order_id_number of this MatchingContact.

        This output displays all Aria-assigned unique identifiers for all destination contacts, related to orders, which match the contact search criteria entered. The get_acct_contacts_m API can be used to reference contact information for each matching contact. If no contact-specific search criteria was input, then all destination contact order ID numbers for the account are displayed.   # noqa: E501

        :param matching_destination_contact_order_id_number: The matching_destination_contact_order_id_number of this MatchingContact.  # noqa: E501
        :type: int
        """

        self._matching_destination_contact_order_id_number = matching_destination_contact_order_id_number

    @property
    def matching_destination_contact_service_id_number(self):
        """Gets the matching_destination_contact_service_id_number of this MatchingContact.  # noqa: E501

        This output displays all Aria assigned unique identifiers for all destination contacts, related to services, which match the contact search criteria entered. If no contact-specific search criteria was input, then all destination contact service ID numbers for the account are displayed.   # noqa: E501

        :return: The matching_destination_contact_service_id_number of this MatchingContact.  # noqa: E501
        :rtype: int
        """
        return self._matching_destination_contact_service_id_number

    @matching_destination_contact_service_id_number.setter
    def matching_destination_contact_service_id_number(self, matching_destination_contact_service_id_number):
        """Sets the matching_destination_contact_service_id_number of this MatchingContact.

        This output displays all Aria assigned unique identifiers for all destination contacts, related to services, which match the contact search criteria entered. If no contact-specific search criteria was input, then all destination contact service ID numbers for the account are displayed.   # noqa: E501

        :param matching_destination_contact_service_id_number: The matching_destination_contact_service_id_number of this MatchingContact.  # noqa: E501
        :type: int
        """

        self._matching_destination_contact_service_id_number = matching_destination_contact_service_id_number

    @property
    def matching_inactive_contact_id_number(self):
        """Gets the matching_inactive_contact_id_number of this MatchingContact.  # noqa: E501

        This output displays all Aria-assigned unique identifiers for all inactive contacts that matched the contact search criteria entered.   # noqa: E501

        :return: The matching_inactive_contact_id_number of this MatchingContact.  # noqa: E501
        :rtype: int
        """
        return self._matching_inactive_contact_id_number

    @matching_inactive_contact_id_number.setter
    def matching_inactive_contact_id_number(self, matching_inactive_contact_id_number):
        """Sets the matching_inactive_contact_id_number of this MatchingContact.

        This output displays all Aria-assigned unique identifiers for all inactive contacts that matched the contact search criteria entered.   # noqa: E501

        :param matching_inactive_contact_id_number: The matching_inactive_contact_id_number of this MatchingContact.  # noqa: E501
        :type: int
        """

        self._matching_inactive_contact_id_number = matching_inactive_contact_id_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchingContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
