# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RefundInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aria_event_no': 'int',
        'acct_no': 'int',
        'user_id': 'str',
        'refund_amount': 'float',
        'create_date': 'str',
        'create_user': 'str',
        'refund_reason_code': 'int',
        'refund_reason_label': 'str',
        'refund_reason_description': 'str',
        'currency_cd': 'str',
        'aria_statement_no': 'int',
        'ref_payment_event_no': 'int',
        'ref_payment_transaction_type': 'int',
        'ref_payment_transaction_desc': 'str',
        'ref_payment_amount': 'float',
        'refund_transaction_type': 'int',
        'refund_transaction_desc': 'str',
        'refund_check_num': 'str',
        'refund_bill_seq_no': 'int',
        'refund_pay_method_id': 'int',
        'refund_pay_method_name': 'str',
        'refund_cc_id': 'int',
        'refund_cc_type': 'str',
        'refund_payment_src_suffix': 'str',
        'refund_is_voided_ind': 'int',
        'bill_email': 'str'
    }

    attribute_map = {
        'aria_event_no': 'aria_event_no',
        'acct_no': 'acct_no',
        'user_id': 'user_id',
        'refund_amount': 'refund_amount',
        'create_date': 'create_date',
        'create_user': 'create_user',
        'refund_reason_code': 'refund_reason_code',
        'refund_reason_label': 'refund_reason_label',
        'refund_reason_description': 'refund_reason_description',
        'currency_cd': 'currency_cd',
        'aria_statement_no': 'aria_statement_no',
        'ref_payment_event_no': 'ref_payment_event_no',
        'ref_payment_transaction_type': 'ref_payment_transaction_type',
        'ref_payment_transaction_desc': 'ref_payment_transaction_desc',
        'ref_payment_amount': 'ref_payment_amount',
        'refund_transaction_type': 'refund_transaction_type',
        'refund_transaction_desc': 'refund_transaction_desc',
        'refund_check_num': 'refund_check_num',
        'refund_bill_seq_no': 'refund_bill_seq_no',
        'refund_pay_method_id': 'refund_pay_method_id',
        'refund_pay_method_name': 'refund_pay_method_name',
        'refund_cc_id': 'refund_cc_id',
        'refund_cc_type': 'refund_cc_type',
        'refund_payment_src_suffix': 'refund_payment_src_suffix',
        'refund_is_voided_ind': 'refund_is_voided_ind',
        'bill_email': 'bill_email'
    }

    def __init__(self, aria_event_no=None, acct_no=None, user_id=None, refund_amount=None, create_date=None, create_user=None, refund_reason_code=None, refund_reason_label=None, refund_reason_description=None, currency_cd=None, aria_statement_no=None, ref_payment_event_no=None, ref_payment_transaction_type=None, ref_payment_transaction_desc=None, ref_payment_amount=None, refund_transaction_type=None, refund_transaction_desc=None, refund_check_num=None, refund_bill_seq_no=None, refund_pay_method_id=None, refund_pay_method_name=None, refund_cc_id=None, refund_cc_type=None, refund_payment_src_suffix=None, refund_is_voided_ind=None, bill_email=None):  # noqa: E501
        """RefundInformation - a model defined in Swagger"""  # noqa: E501

        self._aria_event_no = None
        self._acct_no = None
        self._user_id = None
        self._refund_amount = None
        self._create_date = None
        self._create_user = None
        self._refund_reason_code = None
        self._refund_reason_label = None
        self._refund_reason_description = None
        self._currency_cd = None
        self._aria_statement_no = None
        self._ref_payment_event_no = None
        self._ref_payment_transaction_type = None
        self._ref_payment_transaction_desc = None
        self._ref_payment_amount = None
        self._refund_transaction_type = None
        self._refund_transaction_desc = None
        self._refund_check_num = None
        self._refund_bill_seq_no = None
        self._refund_pay_method_id = None
        self._refund_pay_method_name = None
        self._refund_cc_id = None
        self._refund_cc_type = None
        self._refund_payment_src_suffix = None
        self._refund_is_voided_ind = None
        self._bill_email = None
        self.discriminator = None

        self.aria_event_no = aria_event_no
        self.acct_no = acct_no
        self.user_id = user_id
        self.refund_amount = refund_amount
        self.create_date = create_date
        self.create_user = create_user
        self.refund_reason_code = refund_reason_code
        self.refund_reason_label = refund_reason_label
        self.refund_reason_description = refund_reason_description
        self.currency_cd = currency_cd
        self.aria_statement_no = aria_statement_no
        self.ref_payment_event_no = ref_payment_event_no
        self.ref_payment_transaction_type = ref_payment_transaction_type
        self.ref_payment_transaction_desc = ref_payment_transaction_desc
        self.ref_payment_amount = ref_payment_amount
        self.refund_transaction_type = refund_transaction_type
        self.refund_transaction_desc = refund_transaction_desc
        self.refund_check_num = refund_check_num
        self.refund_bill_seq_no = refund_bill_seq_no
        self.refund_pay_method_id = refund_pay_method_id
        self.refund_pay_method_name = refund_pay_method_name
        self.refund_cc_id = refund_cc_id
        self.refund_cc_type = refund_cc_type
        self.refund_payment_src_suffix = refund_payment_src_suffix
        self.refund_is_voided_ind = refund_is_voided_ind
        self.bill_email = bill_email

    @property
    def aria_event_no(self):
        """Gets the aria_event_no of this RefundInformation.  # noqa: E501

        The Aria assigned ID for the event.  # noqa: E501

        :return: The aria_event_no of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._aria_event_no

    @aria_event_no.setter
    def aria_event_no(self, aria_event_no):
        """Sets the aria_event_no of this RefundInformation.

        The Aria assigned ID for the event.  # noqa: E501

        :param aria_event_no: The aria_event_no of this RefundInformation.  # noqa: E501
        :type: int
        """
        if aria_event_no is None:
            raise ValueError("Invalid value for `aria_event_no`, must not be `None`")  # noqa: E501

        self._aria_event_no = aria_event_no

    @property
    def acct_no(self):
        """Gets the acct_no of this RefundInformation.  # noqa: E501

        The Aria assigned ID of the account.  # noqa: E501

        :return: The acct_no of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._acct_no

    @acct_no.setter
    def acct_no(self, acct_no):
        """Sets the acct_no of this RefundInformation.

        The Aria assigned ID of the account.  # noqa: E501

        :param acct_no: The acct_no of this RefundInformation.  # noqa: E501
        :type: int
        """
        if acct_no is None:
            raise ValueError("Invalid value for `acct_no`, must not be `None`")  # noqa: E501

        self._acct_no = acct_no

    @property
    def user_id(self):
        """Gets the user_id of this RefundInformation.  # noqa: E501

        The client defined user_id for the account.  # noqa: E501

        :return: The user_id of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this RefundInformation.

        The client defined user_id for the account.  # noqa: E501

        :param user_id: The user_id of this RefundInformation.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def refund_amount(self):
        """Gets the refund_amount of this RefundInformation.  # noqa: E501

        Amount of the refund disbursement.  # noqa: E501

        :return: The refund_amount of this RefundInformation.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this RefundInformation.

        Amount of the refund disbursement.  # noqa: E501

        :param refund_amount: The refund_amount of this RefundInformation.  # noqa: E501
        :type: float
        """
        if refund_amount is None:
            raise ValueError("Invalid value for `refund_amount`, must not be `None`")  # noqa: E501

        self._refund_amount = refund_amount

    @property
    def create_date(self):
        """Gets the create_date of this RefundInformation.  # noqa: E501

          # noqa: E501

        :return: The create_date of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this RefundInformation.

          # noqa: E501

        :param create_date: The create_date of this RefundInformation.  # noqa: E501
        :type: str
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")  # noqa: E501

        self._create_date = create_date

    @property
    def create_user(self):
        """Gets the create_user of this RefundInformation.  # noqa: E501

          # noqa: E501

        :return: The create_user of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this RefundInformation.

          # noqa: E501

        :param create_user: The create_user of this RefundInformation.  # noqa: E501
        :type: str
        """
        if create_user is None:
            raise ValueError("Invalid value for `create_user`, must not be `None`")  # noqa: E501

        self._create_user = create_user

    @property
    def refund_reason_code(self):
        """Gets the refund_reason_code of this RefundInformation.  # noqa: E501

          # noqa: E501

        :return: The refund_reason_code of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._refund_reason_code

    @refund_reason_code.setter
    def refund_reason_code(self, refund_reason_code):
        """Sets the refund_reason_code of this RefundInformation.

          # noqa: E501

        :param refund_reason_code: The refund_reason_code of this RefundInformation.  # noqa: E501
        :type: int
        """
        if refund_reason_code is None:
            raise ValueError("Invalid value for `refund_reason_code`, must not be `None`")  # noqa: E501

        self._refund_reason_code = refund_reason_code

    @property
    def refund_reason_label(self):
        """Gets the refund_reason_label of this RefundInformation.  # noqa: E501

          # noqa: E501

        :return: The refund_reason_label of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._refund_reason_label

    @refund_reason_label.setter
    def refund_reason_label(self, refund_reason_label):
        """Sets the refund_reason_label of this RefundInformation.

          # noqa: E501

        :param refund_reason_label: The refund_reason_label of this RefundInformation.  # noqa: E501
        :type: str
        """
        if refund_reason_label is None:
            raise ValueError("Invalid value for `refund_reason_label`, must not be `None`")  # noqa: E501

        self._refund_reason_label = refund_reason_label

    @property
    def refund_reason_description(self):
        """Gets the refund_reason_description of this RefundInformation.  # noqa: E501

          # noqa: E501

        :return: The refund_reason_description of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._refund_reason_description

    @refund_reason_description.setter
    def refund_reason_description(self, refund_reason_description):
        """Sets the refund_reason_description of this RefundInformation.

          # noqa: E501

        :param refund_reason_description: The refund_reason_description of this RefundInformation.  # noqa: E501
        :type: str
        """
        if refund_reason_description is None:
            raise ValueError("Invalid value for `refund_reason_description`, must not be `None`")  # noqa: E501

        self._refund_reason_description = refund_reason_description

    @property
    def currency_cd(self):
        """Gets the currency_cd of this RefundInformation.  # noqa: E501

          # noqa: E501

        :return: The currency_cd of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._currency_cd

    @currency_cd.setter
    def currency_cd(self, currency_cd):
        """Sets the currency_cd of this RefundInformation.

          # noqa: E501

        :param currency_cd: The currency_cd of this RefundInformation.  # noqa: E501
        :type: str
        """
        if currency_cd is None:
            raise ValueError("Invalid value for `currency_cd`, must not be `None`")  # noqa: E501

        self._currency_cd = currency_cd

    @property
    def aria_statement_no(self):
        """Gets the aria_statement_no of this RefundInformation.  # noqa: E501

          # noqa: E501

        :return: The aria_statement_no of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._aria_statement_no

    @aria_statement_no.setter
    def aria_statement_no(self, aria_statement_no):
        """Sets the aria_statement_no of this RefundInformation.

          # noqa: E501

        :param aria_statement_no: The aria_statement_no of this RefundInformation.  # noqa: E501
        :type: int
        """
        if aria_statement_no is None:
            raise ValueError("Invalid value for `aria_statement_no`, must not be `None`")  # noqa: E501

        self._aria_statement_no = aria_statement_no

    @property
    def ref_payment_event_no(self):
        """Gets the ref_payment_event_no of this RefundInformation.  # noqa: E501

        The payment event is being refunded.  # noqa: E501

        :return: The ref_payment_event_no of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._ref_payment_event_no

    @ref_payment_event_no.setter
    def ref_payment_event_no(self, ref_payment_event_no):
        """Sets the ref_payment_event_no of this RefundInformation.

        The payment event is being refunded.  # noqa: E501

        :param ref_payment_event_no: The ref_payment_event_no of this RefundInformation.  # noqa: E501
        :type: int
        """
        if ref_payment_event_no is None:
            raise ValueError("Invalid value for `ref_payment_event_no`, must not be `None`")  # noqa: E501

        self._ref_payment_event_no = ref_payment_event_no

    @property
    def ref_payment_transaction_type(self):
        """Gets the ref_payment_transaction_type of this RefundInformation.  # noqa: E501

        The transaction type code of the payment event that is being refunded.   # noqa: E501

        :return: The ref_payment_transaction_type of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._ref_payment_transaction_type

    @ref_payment_transaction_type.setter
    def ref_payment_transaction_type(self, ref_payment_transaction_type):
        """Sets the ref_payment_transaction_type of this RefundInformation.

        The transaction type code of the payment event that is being refunded.   # noqa: E501

        :param ref_payment_transaction_type: The ref_payment_transaction_type of this RefundInformation.  # noqa: E501
        :type: int
        """
        if ref_payment_transaction_type is None:
            raise ValueError("Invalid value for `ref_payment_transaction_type`, must not be `None`")  # noqa: E501

        self._ref_payment_transaction_type = ref_payment_transaction_type

    @property
    def ref_payment_transaction_desc(self):
        """Gets the ref_payment_transaction_desc of this RefundInformation.  # noqa: E501

        The transaction type of the payment event that is being refunded.   # noqa: E501

        :return: The ref_payment_transaction_desc of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._ref_payment_transaction_desc

    @ref_payment_transaction_desc.setter
    def ref_payment_transaction_desc(self, ref_payment_transaction_desc):
        """Sets the ref_payment_transaction_desc of this RefundInformation.

        The transaction type of the payment event that is being refunded.   # noqa: E501

        :param ref_payment_transaction_desc: The ref_payment_transaction_desc of this RefundInformation.  # noqa: E501
        :type: str
        """
        if ref_payment_transaction_desc is None:
            raise ValueError("Invalid value for `ref_payment_transaction_desc`, must not be `None`")  # noqa: E501

        self._ref_payment_transaction_desc = ref_payment_transaction_desc

    @property
    def ref_payment_amount(self):
        """Gets the ref_payment_amount of this RefundInformation.  # noqa: E501

        The amount of the original payment.  # noqa: E501

        :return: The ref_payment_amount of this RefundInformation.  # noqa: E501
        :rtype: float
        """
        return self._ref_payment_amount

    @ref_payment_amount.setter
    def ref_payment_amount(self, ref_payment_amount):
        """Sets the ref_payment_amount of this RefundInformation.

        The amount of the original payment.  # noqa: E501

        :param ref_payment_amount: The ref_payment_amount of this RefundInformation.  # noqa: E501
        :type: float
        """
        if ref_payment_amount is None:
            raise ValueError("Invalid value for `ref_payment_amount`, must not be `None`")  # noqa: E501

        self._ref_payment_amount = ref_payment_amount

    @property
    def refund_transaction_type(self):
        """Gets the refund_transaction_type of this RefundInformation.  # noqa: E501

        The transaction type code of the refund.  # noqa: E501

        :return: The refund_transaction_type of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._refund_transaction_type

    @refund_transaction_type.setter
    def refund_transaction_type(self, refund_transaction_type):
        """Sets the refund_transaction_type of this RefundInformation.

        The transaction type code of the refund.  # noqa: E501

        :param refund_transaction_type: The refund_transaction_type of this RefundInformation.  # noqa: E501
        :type: int
        """
        if refund_transaction_type is None:
            raise ValueError("Invalid value for `refund_transaction_type`, must not be `None`")  # noqa: E501

        self._refund_transaction_type = refund_transaction_type

    @property
    def refund_transaction_desc(self):
        """Gets the refund_transaction_desc of this RefundInformation.  # noqa: E501

        The transaction type of the refund.  # noqa: E501

        :return: The refund_transaction_desc of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._refund_transaction_desc

    @refund_transaction_desc.setter
    def refund_transaction_desc(self, refund_transaction_desc):
        """Sets the refund_transaction_desc of this RefundInformation.

        The transaction type of the refund.  # noqa: E501

        :param refund_transaction_desc: The refund_transaction_desc of this RefundInformation.  # noqa: E501
        :type: str
        """
        if refund_transaction_desc is None:
            raise ValueError("Invalid value for `refund_transaction_desc`, must not be `None`")  # noqa: E501

        self._refund_transaction_desc = refund_transaction_desc

    @property
    def refund_check_num(self):
        """Gets the refund_check_num of this RefundInformation.  # noqa: E501

        The check that was recorded as being sent to the end user, for external check refunds.   # noqa: E501

        :return: The refund_check_num of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._refund_check_num

    @refund_check_num.setter
    def refund_check_num(self, refund_check_num):
        """Sets the refund_check_num of this RefundInformation.

        The check that was recorded as being sent to the end user, for external check refunds.   # noqa: E501

        :param refund_check_num: The refund_check_num of this RefundInformation.  # noqa: E501
        :type: str
        """
        if refund_check_num is None:
            raise ValueError("Invalid value for `refund_check_num`, must not be `None`")  # noqa: E501

        self._refund_check_num = refund_check_num

    @property
    def refund_bill_seq_no(self):
        """Gets the refund_bill_seq_no of this RefundInformation.  # noqa: E501

        The billing information sequence number used, for electronic refunds.   # noqa: E501

        :return: The refund_bill_seq_no of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._refund_bill_seq_no

    @refund_bill_seq_no.setter
    def refund_bill_seq_no(self, refund_bill_seq_no):
        """Sets the refund_bill_seq_no of this RefundInformation.

        The billing information sequence number used, for electronic refunds.   # noqa: E501

        :param refund_bill_seq_no: The refund_bill_seq_no of this RefundInformation.  # noqa: E501
        :type: int
        """
        if refund_bill_seq_no is None:
            raise ValueError("Invalid value for `refund_bill_seq_no`, must not be `None`")  # noqa: E501

        self._refund_bill_seq_no = refund_bill_seq_no

    @property
    def refund_pay_method_id(self):
        """Gets the refund_pay_method_id of this RefundInformation.  # noqa: E501

        The electronic method ID used (e.g. 1), for electronic refunds.   # noqa: E501

        :return: The refund_pay_method_id of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._refund_pay_method_id

    @refund_pay_method_id.setter
    def refund_pay_method_id(self, refund_pay_method_id):
        """Sets the refund_pay_method_id of this RefundInformation.

        The electronic method ID used (e.g. 1), for electronic refunds.   # noqa: E501

        :param refund_pay_method_id: The refund_pay_method_id of this RefundInformation.  # noqa: E501
        :type: int
        """
        if refund_pay_method_id is None:
            raise ValueError("Invalid value for `refund_pay_method_id`, must not be `None`")  # noqa: E501

        self._refund_pay_method_id = refund_pay_method_id

    @property
    def refund_pay_method_name(self):
        """Gets the refund_pay_method_name of this RefundInformation.  # noqa: E501

        The pay method name (e.g. Credit Card), for electronic refunds.   # noqa: E501

        :return: The refund_pay_method_name of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._refund_pay_method_name

    @refund_pay_method_name.setter
    def refund_pay_method_name(self, refund_pay_method_name):
        """Sets the refund_pay_method_name of this RefundInformation.

        The pay method name (e.g. Credit Card), for electronic refunds.   # noqa: E501

        :param refund_pay_method_name: The refund_pay_method_name of this RefundInformation.  # noqa: E501
        :type: str
        """
        if refund_pay_method_name is None:
            raise ValueError("Invalid value for `refund_pay_method_name`, must not be `None`")  # noqa: E501

        self._refund_pay_method_name = refund_pay_method_name

    @property
    def refund_cc_id(self):
        """Gets the refund_cc_id of this RefundInformation.  # noqa: E501

        The credit card type ID used, for electronic refunds.  # noqa: E501

        :return: The refund_cc_id of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._refund_cc_id

    @refund_cc_id.setter
    def refund_cc_id(self, refund_cc_id):
        """Sets the refund_cc_id of this RefundInformation.

        The credit card type ID used, for electronic refunds.  # noqa: E501

        :param refund_cc_id: The refund_cc_id of this RefundInformation.  # noqa: E501
        :type: int
        """
        if refund_cc_id is None:
            raise ValueError("Invalid value for `refund_cc_id`, must not be `None`")  # noqa: E501

        self._refund_cc_id = refund_cc_id

    @property
    def refund_cc_type(self):
        """Gets the refund_cc_type of this RefundInformation.  # noqa: E501

        The credit card type name (e.g. MasterCard), for electronic refunds.   # noqa: E501

        :return: The refund_cc_type of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._refund_cc_type

    @refund_cc_type.setter
    def refund_cc_type(self, refund_cc_type):
        """Sets the refund_cc_type of this RefundInformation.

        The credit card type name (e.g. MasterCard), for electronic refunds.   # noqa: E501

        :param refund_cc_type: The refund_cc_type of this RefundInformation.  # noqa: E501
        :type: str
        """
        if refund_cc_type is None:
            raise ValueError("Invalid value for `refund_cc_type`, must not be `None`")  # noqa: E501

        self._refund_cc_type = refund_cc_type

    @property
    def refund_payment_src_suffix(self):
        """Gets the refund_payment_src_suffix of this RefundInformation.  # noqa: E501

        The payment suffix from the original electronic billing record.   # noqa: E501

        :return: The refund_payment_src_suffix of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._refund_payment_src_suffix

    @refund_payment_src_suffix.setter
    def refund_payment_src_suffix(self, refund_payment_src_suffix):
        """Sets the refund_payment_src_suffix of this RefundInformation.

        The payment suffix from the original electronic billing record.   # noqa: E501

        :param refund_payment_src_suffix: The refund_payment_src_suffix of this RefundInformation.  # noqa: E501
        :type: str
        """
        if refund_payment_src_suffix is None:
            raise ValueError("Invalid value for `refund_payment_src_suffix`, must not be `None`")  # noqa: E501

        self._refund_payment_src_suffix = refund_payment_src_suffix

    @property
    def refund_is_voided_ind(self):
        """Gets the refund_is_voided_ind of this RefundInformation.  # noqa: E501

        Value is 1 if this refund has been subsequently voided, otherwise 0   # noqa: E501

        :return: The refund_is_voided_ind of this RefundInformation.  # noqa: E501
        :rtype: int
        """
        return self._refund_is_voided_ind

    @refund_is_voided_ind.setter
    def refund_is_voided_ind(self, refund_is_voided_ind):
        """Sets the refund_is_voided_ind of this RefundInformation.

        Value is 1 if this refund has been subsequently voided, otherwise 0   # noqa: E501

        :param refund_is_voided_ind: The refund_is_voided_ind of this RefundInformation.  # noqa: E501
        :type: int
        """
        if refund_is_voided_ind is None:
            raise ValueError("Invalid value for `refund_is_voided_ind`, must not be `None`")  # noqa: E501

        self._refund_is_voided_ind = refund_is_voided_ind

    @property
    def bill_email(self):
        """Gets the bill_email of this RefundInformation.  # noqa: E501

        Email of the billing contact.  Note that this value is currently populated only if the payment method is PayPal Express Checkout and configured to update the billing email address with the PayPal Express Checkout email address.   # noqa: E501

        :return: The bill_email of this RefundInformation.  # noqa: E501
        :rtype: str
        """
        return self._bill_email

    @bill_email.setter
    def bill_email(self, bill_email):
        """Sets the bill_email of this RefundInformation.

        Email of the billing contact.  Note that this value is currently populated only if the payment method is PayPal Express Checkout and configured to update the billing email address with the PayPal Express Checkout email address.   # noqa: E501

        :param bill_email: The bill_email of this RefundInformation.  # noqa: E501
        :type: str
        """
        if bill_email is None:
            raise ValueError("Invalid value for `bill_email`, must not be `None`")  # noqa: E501

        self._bill_email = bill_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
