# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.vendor\ariasystems\model.all_invoice_line_m import AllInvoiceLineM  # noqa: F401,E501


class AllInvoiceDetailsM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_no': 'int',
        'acct_no': 'int',
        'user_id': 'str',
        'client_acct_id': 'str',
        'invoice_type': 'str',
        'from_date': 'str',
        'to_date': 'str',
        'usage_bill_from_date': 'str',
        'usage_bill_thru_date': 'str',
        'taxed_email': 'str',
        'taxed_first_name': 'str',
        'taxed_middle_initial': 'str',
        'taxed_last_name': 'str',
        'taxed_address1': 'str',
        'taxed_address2': 'str',
        'taxed_address3': 'str',
        'taxed_city': 'str',
        'taxed_state': 'str',
        'taxed_locality': 'str',
        'taxed_zip': 'str',
        'taxed_country': 'str',
        'amount': 'float',
        'bill_date': 'str',
        'due_date': 'str',
        'paid_date': 'str',
        'notify_date': 'str',
        'currency_cd': 'str',
        'balance_forward': 'float',
        'statement_balance_forward': 'float',
        'total_due': 'float',
        'comments': 'str',
        'additional_comments': 'str',
        'last_updated': 'str',
        'aria_statement_no': 'int',
        'acct_statement_seq_str': 'str',
        'second_acct_statement_seq_str': 'str',
        'invoice_line_items': 'str',
        'voiding_event_no': 'int',
        'bill_company_name': 'str',
        'pay_method_type': 'int',
        'pay_method_name': 'str',
        'custom_status_label': 'str',
        'client_notes': 'str',
        'billing_group_no': 'int',
        'client_billing_group_id': 'str',
        'all_invoice_line_m': 'list[AllInvoiceLineM]'
    }

    attribute_map = {
        'invoice_no': 'invoice_no',
        'acct_no': 'acct_no',
        'user_id': 'user_id',
        'client_acct_id': 'client_acct_id',
        'invoice_type': 'invoice_type',
        'from_date': 'from_date',
        'to_date': 'to_date',
        'usage_bill_from_date': 'usage_bill_from_date',
        'usage_bill_thru_date': 'usage_bill_thru_date',
        'taxed_email': 'taxed_email',
        'taxed_first_name': 'taxed_first_name',
        'taxed_middle_initial': 'taxed_middle_initial',
        'taxed_last_name': 'taxed_last_name',
        'taxed_address1': 'taxed_address1',
        'taxed_address2': 'taxed_address2',
        'taxed_address3': 'taxed_address3',
        'taxed_city': 'taxed_city',
        'taxed_state': 'taxed_state',
        'taxed_locality': 'taxed_locality',
        'taxed_zip': 'taxed_zip',
        'taxed_country': 'taxed_country',
        'amount': 'amount',
        'bill_date': 'bill_date',
        'due_date': 'due_date',
        'paid_date': 'paid_date',
        'notify_date': 'notify_date',
        'currency_cd': 'currency_cd',
        'balance_forward': 'balance_forward',
        'statement_balance_forward': 'statement_balance_forward',
        'total_due': 'total_due',
        'comments': 'comments',
        'additional_comments': 'additional_comments',
        'last_updated': 'last_updated',
        'aria_statement_no': 'aria_statement_no',
        'acct_statement_seq_str': 'acct_statement_seq_str',
        'second_acct_statement_seq_str': 'second_acct_statement_seq_str',
        'invoice_line_items': 'invoice_line_items',
        'voiding_event_no': 'voiding_event_no',
        'bill_company_name': 'bill_company_name',
        'pay_method_type': 'pay_method_type',
        'pay_method_name': 'pay_method_name',
        'custom_status_label': 'custom_status_label',
        'client_notes': 'client_notes',
        'billing_group_no': 'billing_group_no',
        'client_billing_group_id': 'client_billing_group_id',
        'all_invoice_line_m': 'all_invoice_line_m'
    }

    def __init__(self, invoice_no=None, acct_no=None, user_id=None, client_acct_id=None, invoice_type=None, from_date=None, to_date=None, usage_bill_from_date=None, usage_bill_thru_date=None, taxed_email=None, taxed_first_name=None, taxed_middle_initial=None, taxed_last_name=None, taxed_address1=None, taxed_address2=None, taxed_address3=None, taxed_city=None, taxed_state=None, taxed_locality=None, taxed_zip=None, taxed_country=None, amount=None, bill_date=None, due_date=None, paid_date=None, notify_date=None, currency_cd=None, balance_forward=None, statement_balance_forward=None, total_due=None, comments=None, additional_comments=None, last_updated=None, aria_statement_no=None, acct_statement_seq_str=None, second_acct_statement_seq_str=None, invoice_line_items=None, voiding_event_no=None, bill_company_name=None, pay_method_type=None, pay_method_name=None, custom_status_label=None, client_notes=None, billing_group_no=None, client_billing_group_id=None, all_invoice_line_m=None):  # noqa: E501
        """AllInvoiceDetailsM - a model defined in Swagger"""  # noqa: E501

        self._invoice_no = None
        self._acct_no = None
        self._user_id = None
        self._client_acct_id = None
        self._invoice_type = None
        self._from_date = None
        self._to_date = None
        self._usage_bill_from_date = None
        self._usage_bill_thru_date = None
        self._taxed_email = None
        self._taxed_first_name = None
        self._taxed_middle_initial = None
        self._taxed_last_name = None
        self._taxed_address1 = None
        self._taxed_address2 = None
        self._taxed_address3 = None
        self._taxed_city = None
        self._taxed_state = None
        self._taxed_locality = None
        self._taxed_zip = None
        self._taxed_country = None
        self._amount = None
        self._bill_date = None
        self._due_date = None
        self._paid_date = None
        self._notify_date = None
        self._currency_cd = None
        self._balance_forward = None
        self._statement_balance_forward = None
        self._total_due = None
        self._comments = None
        self._additional_comments = None
        self._last_updated = None
        self._aria_statement_no = None
        self._acct_statement_seq_str = None
        self._second_acct_statement_seq_str = None
        self._invoice_line_items = None
        self._voiding_event_no = None
        self._bill_company_name = None
        self._pay_method_type = None
        self._pay_method_name = None
        self._custom_status_label = None
        self._client_notes = None
        self._billing_group_no = None
        self._client_billing_group_id = None
        self._all_invoice_line_m = None
        self.discriminator = None

        if invoice_no is not None:
            self.invoice_no = invoice_no
        if acct_no is not None:
            self.acct_no = acct_no
        if user_id is not None:
            self.user_id = user_id
        if client_acct_id is not None:
            self.client_acct_id = client_acct_id
        if invoice_type is not None:
            self.invoice_type = invoice_type
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if usage_bill_from_date is not None:
            self.usage_bill_from_date = usage_bill_from_date
        if usage_bill_thru_date is not None:
            self.usage_bill_thru_date = usage_bill_thru_date
        if taxed_email is not None:
            self.taxed_email = taxed_email
        if taxed_first_name is not None:
            self.taxed_first_name = taxed_first_name
        if taxed_middle_initial is not None:
            self.taxed_middle_initial = taxed_middle_initial
        if taxed_last_name is not None:
            self.taxed_last_name = taxed_last_name
        if taxed_address1 is not None:
            self.taxed_address1 = taxed_address1
        if taxed_address2 is not None:
            self.taxed_address2 = taxed_address2
        if taxed_address3 is not None:
            self.taxed_address3 = taxed_address3
        if taxed_city is not None:
            self.taxed_city = taxed_city
        if taxed_state is not None:
            self.taxed_state = taxed_state
        if taxed_locality is not None:
            self.taxed_locality = taxed_locality
        if taxed_zip is not None:
            self.taxed_zip = taxed_zip
        if taxed_country is not None:
            self.taxed_country = taxed_country
        if amount is not None:
            self.amount = amount
        if bill_date is not None:
            self.bill_date = bill_date
        if due_date is not None:
            self.due_date = due_date
        if paid_date is not None:
            self.paid_date = paid_date
        if notify_date is not None:
            self.notify_date = notify_date
        if currency_cd is not None:
            self.currency_cd = currency_cd
        if balance_forward is not None:
            self.balance_forward = balance_forward
        if statement_balance_forward is not None:
            self.statement_balance_forward = statement_balance_forward
        if total_due is not None:
            self.total_due = total_due
        if comments is not None:
            self.comments = comments
        if additional_comments is not None:
            self.additional_comments = additional_comments
        if last_updated is not None:
            self.last_updated = last_updated
        if aria_statement_no is not None:
            self.aria_statement_no = aria_statement_no
        if acct_statement_seq_str is not None:
            self.acct_statement_seq_str = acct_statement_seq_str
        if second_acct_statement_seq_str is not None:
            self.second_acct_statement_seq_str = second_acct_statement_seq_str
        if invoice_line_items is not None:
            self.invoice_line_items = invoice_line_items
        if voiding_event_no is not None:
            self.voiding_event_no = voiding_event_no
        if bill_company_name is not None:
            self.bill_company_name = bill_company_name
        if pay_method_type is not None:
            self.pay_method_type = pay_method_type
        if pay_method_name is not None:
            self.pay_method_name = pay_method_name
        if custom_status_label is not None:
            self.custom_status_label = custom_status_label
        if client_notes is not None:
            self.client_notes = client_notes
        if billing_group_no is not None:
            self.billing_group_no = billing_group_no
        if client_billing_group_id is not None:
            self.client_billing_group_id = client_billing_group_id
        if all_invoice_line_m is not None:
            self.all_invoice_line_m = all_invoice_line_m

    @property
    def invoice_no(self):
        """Gets the invoice_no of this AllInvoiceDetailsM.  # noqa: E501

        The Aria assigned ID of the invoice  # noqa: E501

        :return: The invoice_no of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._invoice_no

    @invoice_no.setter
    def invoice_no(self, invoice_no):
        """Sets the invoice_no of this AllInvoiceDetailsM.

        The Aria assigned ID of the invoice  # noqa: E501

        :param invoice_no: The invoice_no of this AllInvoiceDetailsM.  # noqa: E501
        :type: int
        """

        self._invoice_no = invoice_no

    @property
    def acct_no(self):
        """Gets the acct_no of this AllInvoiceDetailsM.  # noqa: E501

        The Aria assigned ID of the account  # noqa: E501

        :return: The acct_no of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._acct_no

    @acct_no.setter
    def acct_no(self, acct_no):
        """Sets the acct_no of this AllInvoiceDetailsM.

        The Aria assigned ID of the account  # noqa: E501

        :param acct_no: The acct_no of this AllInvoiceDetailsM.  # noqa: E501
        :type: int
        """

        self._acct_no = acct_no

    @property
    def user_id(self):
        """Gets the user_id of this AllInvoiceDetailsM.  # noqa: E501

        The client defined user_id for the account  # noqa: E501

        :return: The user_id of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AllInvoiceDetailsM.

        The client defined user_id for the account  # noqa: E501

        :param user_id: The user_id of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def client_acct_id(self):
        """Gets the client_acct_id of this AllInvoiceDetailsM.  # noqa: E501

        Client-specified account identifier  # noqa: E501

        :return: The client_acct_id of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._client_acct_id

    @client_acct_id.setter
    def client_acct_id(self, client_acct_id):
        """Sets the client_acct_id of this AllInvoiceDetailsM.

        Client-specified account identifier  # noqa: E501

        :param client_acct_id: The client_acct_id of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._client_acct_id = client_acct_id

    @property
    def invoice_type(self):
        """Gets the invoice_type of this AllInvoiceDetailsM.  # noqa: E501

        Determines if this is a real invoice (R) or a pending invoice (P)  # noqa: E501

        :return: The invoice_type of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this AllInvoiceDetailsM.

        Determines if this is a real invoice (R) or a pending invoice (P)  # noqa: E501

        :param invoice_type: The invoice_type of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._invoice_type = invoice_type

    @property
    def from_date(self):
        """Gets the from_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The from_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param from_date: The from_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The to_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param to_date: The to_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._to_date = to_date

    @property
    def usage_bill_from_date(self):
        """Gets the usage_bill_from_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The usage_bill_from_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._usage_bill_from_date

    @usage_bill_from_date.setter
    def usage_bill_from_date(self, usage_bill_from_date):
        """Sets the usage_bill_from_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param usage_bill_from_date: The usage_bill_from_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._usage_bill_from_date = usage_bill_from_date

    @property
    def usage_bill_thru_date(self):
        """Gets the usage_bill_thru_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The usage_bill_thru_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._usage_bill_thru_date

    @usage_bill_thru_date.setter
    def usage_bill_thru_date(self, usage_bill_thru_date):
        """Sets the usage_bill_thru_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param usage_bill_thru_date: The usage_bill_thru_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._usage_bill_thru_date = usage_bill_thru_date

    @property
    def taxed_email(self):
        """Gets the taxed_email of this AllInvoiceDetailsM.  # noqa: E501

        The email address of the taxed contact, or the general billing email address.  # noqa: E501

        :return: The taxed_email of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_email

    @taxed_email.setter
    def taxed_email(self, taxed_email):
        """Sets the taxed_email of this AllInvoiceDetailsM.

        The email address of the taxed contact, or the general billing email address.  # noqa: E501

        :param taxed_email: The taxed_email of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_email = taxed_email

    @property
    def taxed_first_name(self):
        """Gets the taxed_first_name of this AllInvoiceDetailsM.  # noqa: E501

        The first name of the taxed contact for the account.  # noqa: E501

        :return: The taxed_first_name of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_first_name

    @taxed_first_name.setter
    def taxed_first_name(self, taxed_first_name):
        """Sets the taxed_first_name of this AllInvoiceDetailsM.

        The first name of the taxed contact for the account.  # noqa: E501

        :param taxed_first_name: The taxed_first_name of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_first_name = taxed_first_name

    @property
    def taxed_middle_initial(self):
        """Gets the taxed_middle_initial of this AllInvoiceDetailsM.  # noqa: E501

        The middle initial of the taxed contact.  # noqa: E501

        :return: The taxed_middle_initial of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_middle_initial

    @taxed_middle_initial.setter
    def taxed_middle_initial(self, taxed_middle_initial):
        """Sets the taxed_middle_initial of this AllInvoiceDetailsM.

        The middle initial of the taxed contact.  # noqa: E501

        :param taxed_middle_initial: The taxed_middle_initial of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_middle_initial = taxed_middle_initial

    @property
    def taxed_last_name(self):
        """Gets the taxed_last_name of this AllInvoiceDetailsM.  # noqa: E501

        The last name of the taxed contact.  # noqa: E501

        :return: The taxed_last_name of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_last_name

    @taxed_last_name.setter
    def taxed_last_name(self, taxed_last_name):
        """Sets the taxed_last_name of this AllInvoiceDetailsM.

        The last name of the taxed contact.  # noqa: E501

        :param taxed_last_name: The taxed_last_name of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_last_name = taxed_last_name

    @property
    def taxed_address1(self):
        """Gets the taxed_address1 of this AllInvoiceDetailsM.  # noqa: E501

        Street address (number and name) of the taxed contact address.  # noqa: E501

        :return: The taxed_address1 of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_address1

    @taxed_address1.setter
    def taxed_address1(self, taxed_address1):
        """Sets the taxed_address1 of this AllInvoiceDetailsM.

        Street address (number and name) of the taxed contact address.  # noqa: E501

        :param taxed_address1: The taxed_address1 of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_address1 = taxed_address1

    @property
    def taxed_address2(self):
        """Gets the taxed_address2 of this AllInvoiceDetailsM.  # noqa: E501

        The second taxed address line (for example: bldg, suite, apt., etc.)  # noqa: E501

        :return: The taxed_address2 of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_address2

    @taxed_address2.setter
    def taxed_address2(self, taxed_address2):
        """Sets the taxed_address2 of this AllInvoiceDetailsM.

        The second taxed address line (for example: bldg, suite, apt., etc.)  # noqa: E501

        :param taxed_address2: The taxed_address2 of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_address2 = taxed_address2

    @property
    def taxed_address3(self):
        """Gets the taxed_address3 of this AllInvoiceDetailsM.  # noqa: E501

        The third taxed address line (for example: bldg, suite, apt., etc.)  # noqa: E501

        :return: The taxed_address3 of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_address3

    @taxed_address3.setter
    def taxed_address3(self, taxed_address3):
        """Sets the taxed_address3 of this AllInvoiceDetailsM.

        The third taxed address line (for example: bldg, suite, apt., etc.)  # noqa: E501

        :param taxed_address3: The taxed_address3 of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_address3 = taxed_address3

    @property
    def taxed_city(self):
        """Gets the taxed_city of this AllInvoiceDetailsM.  # noqa: E501

        The city name of the taxed contact address.  # noqa: E501

        :return: The taxed_city of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_city

    @taxed_city.setter
    def taxed_city(self, taxed_city):
        """Sets the taxed_city of this AllInvoiceDetailsM.

        The city name of the taxed contact address.  # noqa: E501

        :param taxed_city: The taxed_city of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_city = taxed_city

    @property
    def taxed_state(self):
        """Gets the taxed_state of this AllInvoiceDetailsM.  # noqa: E501

        The state or province of the taxed contact's address.  The official postal-service codes for all United States  and Canada states, provinces, and territories.   # noqa: E501

        :return: The taxed_state of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_state

    @taxed_state.setter
    def taxed_state(self, taxed_state):
        """Sets the taxed_state of this AllInvoiceDetailsM.

        The state or province of the taxed contact's address.  The official postal-service codes for all United States  and Canada states, provinces, and territories.   # noqa: E501

        :param taxed_state: The taxed_state of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_state = taxed_state

    @property
    def taxed_locality(self):
        """Gets the taxed_locality of this AllInvoiceDetailsM.  # noqa: E501

        The billing contact's locality (for example: county, rural unincorporated area name).   # noqa: E501

        :return: The taxed_locality of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_locality

    @taxed_locality.setter
    def taxed_locality(self, taxed_locality):
        """Sets the taxed_locality of this AllInvoiceDetailsM.

        The billing contact's locality (for example: county, rural unincorporated area name).   # noqa: E501

        :param taxed_locality: The taxed_locality of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_locality = taxed_locality

    @property
    def taxed_zip(self):
        """Gets the taxed_zip of this AllInvoiceDetailsM.  # noqa: E501

        The zip or postal code for the taxed contact's address.   # noqa: E501

        :return: The taxed_zip of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_zip

    @taxed_zip.setter
    def taxed_zip(self, taxed_zip):
        """Sets the taxed_zip of this AllInvoiceDetailsM.

        The zip or postal code for the taxed contact's address.   # noqa: E501

        :param taxed_zip: The taxed_zip of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_zip = taxed_zip

    @property
    def taxed_country(self):
        """Gets the taxed_country of this AllInvoiceDetailsM.  # noqa: E501

        The country for the taxed contact's address.  The ISO-compliant 2-character country code abbreviation in uppercase.   # noqa: E501

        :return: The taxed_country of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._taxed_country

    @taxed_country.setter
    def taxed_country(self, taxed_country):
        """Sets the taxed_country of this AllInvoiceDetailsM.

        The country for the taxed contact's address.  The ISO-compliant 2-character country code abbreviation in uppercase.   # noqa: E501

        :param taxed_country: The taxed_country of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._taxed_country = taxed_country

    @property
    def amount(self):
        """Gets the amount of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The amount of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AllInvoiceDetailsM.

          # noqa: E501

        :param amount: The amount of this AllInvoiceDetailsM.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def bill_date(self):
        """Gets the bill_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The bill_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._bill_date

    @bill_date.setter
    def bill_date(self, bill_date):
        """Sets the bill_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param bill_date: The bill_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._bill_date = bill_date

    @property
    def due_date(self):
        """Gets the due_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The due_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param due_date: The due_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def paid_date(self):
        """Gets the paid_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The paid_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._paid_date

    @paid_date.setter
    def paid_date(self, paid_date):
        """Sets the paid_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param paid_date: The paid_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._paid_date = paid_date

    @property
    def notify_date(self):
        """Gets the notify_date of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The notify_date of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._notify_date

    @notify_date.setter
    def notify_date(self, notify_date):
        """Sets the notify_date of this AllInvoiceDetailsM.

          # noqa: E501

        :param notify_date: The notify_date of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._notify_date = notify_date

    @property
    def currency_cd(self):
        """Gets the currency_cd of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The currency_cd of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._currency_cd

    @currency_cd.setter
    def currency_cd(self, currency_cd):
        """Sets the currency_cd of this AllInvoiceDetailsM.

          # noqa: E501

        :param currency_cd: The currency_cd of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._currency_cd = currency_cd

    @property
    def balance_forward(self):
        """Gets the balance_forward of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The balance_forward of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: float
        """
        return self._balance_forward

    @balance_forward.setter
    def balance_forward(self, balance_forward):
        """Sets the balance_forward of this AllInvoiceDetailsM.

          # noqa: E501

        :param balance_forward: The balance_forward of this AllInvoiceDetailsM.  # noqa: E501
        :type: float
        """

        self._balance_forward = balance_forward

    @property
    def statement_balance_forward(self):
        """Gets the statement_balance_forward of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The statement_balance_forward of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: float
        """
        return self._statement_balance_forward

    @statement_balance_forward.setter
    def statement_balance_forward(self, statement_balance_forward):
        """Sets the statement_balance_forward of this AllInvoiceDetailsM.

          # noqa: E501

        :param statement_balance_forward: The statement_balance_forward of this AllInvoiceDetailsM.  # noqa: E501
        :type: float
        """

        self._statement_balance_forward = statement_balance_forward

    @property
    def total_due(self):
        """Gets the total_due of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The total_due of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: float
        """
        return self._total_due

    @total_due.setter
    def total_due(self, total_due):
        """Sets the total_due of this AllInvoiceDetailsM.

          # noqa: E501

        :param total_due: The total_due of this AllInvoiceDetailsM.  # noqa: E501
        :type: float
        """

        self._total_due = total_due

    @property
    def comments(self):
        """Gets the comments of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The comments of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AllInvoiceDetailsM.

          # noqa: E501

        :param comments: The comments of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def additional_comments(self):
        """Gets the additional_comments of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The additional_comments of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._additional_comments

    @additional_comments.setter
    def additional_comments(self, additional_comments):
        """Sets the additional_comments of this AllInvoiceDetailsM.

          # noqa: E501

        :param additional_comments: The additional_comments of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._additional_comments = additional_comments

    @property
    def last_updated(self):
        """Gets the last_updated of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The last_updated of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AllInvoiceDetailsM.

          # noqa: E501

        :param last_updated: The last_updated of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def aria_statement_no(self):
        """Gets the aria_statement_no of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The aria_statement_no of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._aria_statement_no

    @aria_statement_no.setter
    def aria_statement_no(self, aria_statement_no):
        """Sets the aria_statement_no of this AllInvoiceDetailsM.

          # noqa: E501

        :param aria_statement_no: The aria_statement_no of this AllInvoiceDetailsM.  # noqa: E501
        :type: int
        """

        self._aria_statement_no = aria_statement_no

    @property
    def acct_statement_seq_str(self):
        """Gets the acct_statement_seq_str of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The acct_statement_seq_str of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._acct_statement_seq_str

    @acct_statement_seq_str.setter
    def acct_statement_seq_str(self, acct_statement_seq_str):
        """Sets the acct_statement_seq_str of this AllInvoiceDetailsM.

          # noqa: E501

        :param acct_statement_seq_str: The acct_statement_seq_str of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._acct_statement_seq_str = acct_statement_seq_str

    @property
    def second_acct_statement_seq_str(self):
        """Gets the second_acct_statement_seq_str of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The second_acct_statement_seq_str of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._second_acct_statement_seq_str

    @second_acct_statement_seq_str.setter
    def second_acct_statement_seq_str(self, second_acct_statement_seq_str):
        """Sets the second_acct_statement_seq_str of this AllInvoiceDetailsM.

          # noqa: E501

        :param second_acct_statement_seq_str: The second_acct_statement_seq_str of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._second_acct_statement_seq_str = second_acct_statement_seq_str

    @property
    def invoice_line_items(self):
        """Gets the invoice_line_items of this AllInvoiceDetailsM.  # noqa: E501

        Whether or not the invoice has any line items  # noqa: E501

        :return: The invoice_line_items of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._invoice_line_items

    @invoice_line_items.setter
    def invoice_line_items(self, invoice_line_items):
        """Sets the invoice_line_items of this AllInvoiceDetailsM.

        Whether or not the invoice has any line items  # noqa: E501

        :param invoice_line_items: The invoice_line_items of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._invoice_line_items = invoice_line_items

    @property
    def voiding_event_no(self):
        """Gets the voiding_event_no of this AllInvoiceDetailsM.  # noqa: E501

        The number given for a voided invoice  # noqa: E501

        :return: The voiding_event_no of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._voiding_event_no

    @voiding_event_no.setter
    def voiding_event_no(self, voiding_event_no):
        """Sets the voiding_event_no of this AllInvoiceDetailsM.

        The number given for a voided invoice  # noqa: E501

        :param voiding_event_no: The voiding_event_no of this AllInvoiceDetailsM.  # noqa: E501
        :type: int
        """

        self._voiding_event_no = voiding_event_no

    @property
    def bill_company_name(self):
        """Gets the bill_company_name of this AllInvoiceDetailsM.  # noqa: E501

        The company name of the billing contact for the invoice  # noqa: E501

        :return: The bill_company_name of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._bill_company_name

    @bill_company_name.setter
    def bill_company_name(self, bill_company_name):
        """Sets the bill_company_name of this AllInvoiceDetailsM.

        The company name of the billing contact for the invoice  # noqa: E501

        :param bill_company_name: The bill_company_name of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._bill_company_name = bill_company_name

    @property
    def pay_method_type(self):
        """Gets the pay_method_type of this AllInvoiceDetailsM.  # noqa: E501

        Integer values for the Aria supported payment method types. Allowable values are: 1, 0, 1-19 and 26.   # noqa: E501

        :return: The pay_method_type of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._pay_method_type

    @pay_method_type.setter
    def pay_method_type(self, pay_method_type):
        """Sets the pay_method_type of this AllInvoiceDetailsM.

        Integer values for the Aria supported payment method types. Allowable values are: 1, 0, 1-19 and 26.   # noqa: E501

        :param pay_method_type: The pay_method_type of this AllInvoiceDetailsM.  # noqa: E501
        :type: int
        """

        self._pay_method_type = pay_method_type

    @property
    def pay_method_name(self):
        """Gets the pay_method_name of this AllInvoiceDetailsM.  # noqa: E501

        Human readable names for the Aria supported payment method types. Allowable values are:   i. External Payment, ii. Other, iii. Credit card, iv. Electronic Check (ACH), v. Pre-paid4Net terms 30, vi. Net terms 10, vii. Net terms 15, viii. Net terms 60, ix. Click&Buy, x. Net Terms 0, xi. PayByCash, xii. PayPal Express Checkout, xiii. Net Terms 45, xiv. Tokenized Credit Card, xv. Purchase Power, xvi. Net Terms 35, xvii. Net Terms 75, xviii. Net Terms 90, xix. Net Terms 120, xx. Net Terms 25, xxi. Direct Debit.   # noqa: E501

        :return: The pay_method_name of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._pay_method_name

    @pay_method_name.setter
    def pay_method_name(self, pay_method_name):
        """Sets the pay_method_name of this AllInvoiceDetailsM.

        Human readable names for the Aria supported payment method types. Allowable values are:   i. External Payment, ii. Other, iii. Credit card, iv. Electronic Check (ACH), v. Pre-paid4Net terms 30, vi. Net terms 10, vii. Net terms 15, viii. Net terms 60, ix. Click&Buy, x. Net Terms 0, xi. PayByCash, xii. PayPal Express Checkout, xiii. Net Terms 45, xiv. Tokenized Credit Card, xv. Purchase Power, xvi. Net Terms 35, xvii. Net Terms 75, xviii. Net Terms 90, xix. Net Terms 120, xx. Net Terms 25, xxi. Direct Debit.   # noqa: E501

        :param pay_method_name: The pay_method_name of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._pay_method_name = pay_method_name

    @property
    def custom_status_label(self):
        """Gets the custom_status_label of this AllInvoiceDetailsM.  # noqa: E501

        Value allowed for Client specific custom invoice status that can be edited at the invoice or pending invoice level  # noqa: E501

        :return: The custom_status_label of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._custom_status_label

    @custom_status_label.setter
    def custom_status_label(self, custom_status_label):
        """Sets the custom_status_label of this AllInvoiceDetailsM.

        Value allowed for Client specific custom invoice status that can be edited at the invoice or pending invoice level  # noqa: E501

        :param custom_status_label: The custom_status_label of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._custom_status_label = custom_status_label

    @property
    def client_notes(self):
        """Gets the client_notes of this AllInvoiceDetailsM.  # noqa: E501

        Client specific custom invoice notes that can be edited at the invoice or pending invoice level  # noqa: E501

        :return: The client_notes of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._client_notes

    @client_notes.setter
    def client_notes(self, client_notes):
        """Sets the client_notes of this AllInvoiceDetailsM.

        Client specific custom invoice notes that can be edited at the invoice or pending invoice level  # noqa: E501

        :param client_notes: The client_notes of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._client_notes = client_notes

    @property
    def billing_group_no(self):
        """Gets the billing_group_no of this AllInvoiceDetailsM.  # noqa: E501

        Billing group for which the invoice was generated  # noqa: E501

        :return: The billing_group_no of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: int
        """
        return self._billing_group_no

    @billing_group_no.setter
    def billing_group_no(self, billing_group_no):
        """Sets the billing_group_no of this AllInvoiceDetailsM.

        Billing group for which the invoice was generated  # noqa: E501

        :param billing_group_no: The billing_group_no of this AllInvoiceDetailsM.  # noqa: E501
        :type: int
        """

        self._billing_group_no = billing_group_no

    @property
    def client_billing_group_id(self):
        """Gets the client_billing_group_id of this AllInvoiceDetailsM.  # noqa: E501

        Client assigned billing group id for which the invoice was generated  # noqa: E501

        :return: The client_billing_group_id of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: str
        """
        return self._client_billing_group_id

    @client_billing_group_id.setter
    def client_billing_group_id(self, client_billing_group_id):
        """Sets the client_billing_group_id of this AllInvoiceDetailsM.

        Client assigned billing group id for which the invoice was generated  # noqa: E501

        :param client_billing_group_id: The client_billing_group_id of this AllInvoiceDetailsM.  # noqa: E501
        :type: str
        """

        self._client_billing_group_id = client_billing_group_id

    @property
    def all_invoice_line_m(self):
        """Gets the all_invoice_line_m of this AllInvoiceDetailsM.  # noqa: E501

          # noqa: E501

        :return: The all_invoice_line_m of this AllInvoiceDetailsM.  # noqa: E501
        :rtype: list[AllInvoiceLineM]
        """
        return self._all_invoice_line_m

    @all_invoice_line_m.setter
    def all_invoice_line_m(self, all_invoice_line_m):
        """Sets the all_invoice_line_m of this AllInvoiceDetailsM.

          # noqa: E501

        :param all_invoice_line_m: The all_invoice_line_m of this AllInvoiceDetailsM.  # noqa: E501
        :type: list[AllInvoiceLineM]
        """

        self._all_invoice_line_m = all_invoice_line_m

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllInvoiceDetailsM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
