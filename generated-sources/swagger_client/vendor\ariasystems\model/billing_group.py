# coding: utf-8

"""
    Object Query API

    Object Query API for Aria billing  # noqa: E501

    OpenAPI spec version: 23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.vendor\ariasystems\model.collection_group_bg_info import CollectionGroupBgInfo  # noqa: F401,E501


class BillingGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_group_no': 'str',
        'billing_group_name': 'str',
        'billing_group_description': 'str',
        'client_billing_group_id': 'str',
        'bg_list_start_master_file': 'int',
        'primary_pay_method': 'int',
        'primary_pay_method_name': 'str',
        'secondary_pay_method': 'int',
        'secondary_pay_method_name': 'str',
        'stmt_email_list_cc': 'str',
        'stmt_email_list_bcc': 'str',
        'collection_group_bg_info': 'list[CollectionGroupBgInfo]'
    }

    attribute_map = {
        'billing_group_no': 'billing_group_no',
        'billing_group_name': 'billing_group_name',
        'billing_group_description': 'billing_group_description',
        'client_billing_group_id': 'client_billing_group_id',
        'bg_list_start_master_file': 'bg_list_start_master_file',
        'primary_pay_method': 'primary_pay_method',
        'primary_pay_method_name': 'primary_pay_method_name',
        'secondary_pay_method': 'secondary_pay_method',
        'secondary_pay_method_name': 'secondary_pay_method_name',
        'stmt_email_list_cc': 'stmt_email_list_cc',
        'stmt_email_list_bcc': 'stmt_email_list_bcc',
        'collection_group_bg_info': 'collection_group_bg_info'
    }

    def __init__(self, billing_group_no=None, billing_group_name=None, billing_group_description=None, client_billing_group_id=None, bg_list_start_master_file=None, primary_pay_method=None, primary_pay_method_name=None, secondary_pay_method=None, secondary_pay_method_name=None, stmt_email_list_cc=None, stmt_email_list_bcc=None, collection_group_bg_info=None):  # noqa: E501
        """BillingGroup - a model defined in Swagger"""  # noqa: E501

        self._billing_group_no = None
        self._billing_group_name = None
        self._billing_group_description = None
        self._client_billing_group_id = None
        self._bg_list_start_master_file = None
        self._primary_pay_method = None
        self._primary_pay_method_name = None
        self._secondary_pay_method = None
        self._secondary_pay_method_name = None
        self._stmt_email_list_cc = None
        self._stmt_email_list_bcc = None
        self._collection_group_bg_info = None
        self.discriminator = None

        if billing_group_no is not None:
            self.billing_group_no = billing_group_no
        if billing_group_name is not None:
            self.billing_group_name = billing_group_name
        if billing_group_description is not None:
            self.billing_group_description = billing_group_description
        if client_billing_group_id is not None:
            self.client_billing_group_id = client_billing_group_id
        if bg_list_start_master_file is not None:
            self.bg_list_start_master_file = bg_list_start_master_file
        if primary_pay_method is not None:
            self.primary_pay_method = primary_pay_method
        if primary_pay_method_name is not None:
            self.primary_pay_method_name = primary_pay_method_name
        if secondary_pay_method is not None:
            self.secondary_pay_method = secondary_pay_method
        if secondary_pay_method_name is not None:
            self.secondary_pay_method_name = secondary_pay_method_name
        if stmt_email_list_cc is not None:
            self.stmt_email_list_cc = stmt_email_list_cc
        if stmt_email_list_bcc is not None:
            self.stmt_email_list_bcc = stmt_email_list_bcc
        if collection_group_bg_info is not None:
            self.collection_group_bg_info = collection_group_bg_info

    @property
    def billing_group_no(self):
        """Gets the billing_group_no of this BillingGroup.  # noqa: E501

        The system defined billing group ID  # noqa: E501

        :return: The billing_group_no of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._billing_group_no

    @billing_group_no.setter
    def billing_group_no(self, billing_group_no):
        """Sets the billing_group_no of this BillingGroup.

        The system defined billing group ID  # noqa: E501

        :param billing_group_no: The billing_group_no of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._billing_group_no = billing_group_no

    @property
    def billing_group_name(self):
        """Gets the billing_group_name of this BillingGroup.  # noqa: E501

          # noqa: E501

        :return: The billing_group_name of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._billing_group_name

    @billing_group_name.setter
    def billing_group_name(self, billing_group_name):
        """Sets the billing_group_name of this BillingGroup.

          # noqa: E501

        :param billing_group_name: The billing_group_name of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._billing_group_name = billing_group_name

    @property
    def billing_group_description(self):
        """Gets the billing_group_description of this BillingGroup.  # noqa: E501

          # noqa: E501

        :return: The billing_group_description of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._billing_group_description

    @billing_group_description.setter
    def billing_group_description(self, billing_group_description):
        """Sets the billing_group_description of this BillingGroup.

          # noqa: E501

        :param billing_group_description: The billing_group_description of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._billing_group_description = billing_group_description

    @property
    def client_billing_group_id(self):
        """Gets the client_billing_group_id of this BillingGroup.  # noqa: E501

        The client defined  defined billing group ID  # noqa: E501

        :return: The client_billing_group_id of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._client_billing_group_id

    @client_billing_group_id.setter
    def client_billing_group_id(self, client_billing_group_id):
        """Sets the client_billing_group_id of this BillingGroup.

        The client defined  defined billing group ID  # noqa: E501

        :param client_billing_group_id: The client_billing_group_id of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._client_billing_group_id = client_billing_group_id

    @property
    def bg_list_start_master_file(self):
        """Gets the bg_list_start_master_file of this BillingGroup.  # noqa: E501

        Indicates whether or not the account shall be listed at the start of a master file.  # noqa: E501

        :return: The bg_list_start_master_file of this BillingGroup.  # noqa: E501
        :rtype: int
        """
        return self._bg_list_start_master_file

    @bg_list_start_master_file.setter
    def bg_list_start_master_file(self, bg_list_start_master_file):
        """Sets the bg_list_start_master_file of this BillingGroup.

        Indicates whether or not the account shall be listed at the start of a master file.  # noqa: E501

        :param bg_list_start_master_file: The bg_list_start_master_file of this BillingGroup.  # noqa: E501
        :type: int
        """

        self._bg_list_start_master_file = bg_list_start_master_file

    @property
    def primary_pay_method(self):
        """Gets the primary_pay_method of this BillingGroup.  # noqa: E501

        Primary pay method number  # noqa: E501

        :return: The primary_pay_method of this BillingGroup.  # noqa: E501
        :rtype: int
        """
        return self._primary_pay_method

    @primary_pay_method.setter
    def primary_pay_method(self, primary_pay_method):
        """Sets the primary_pay_method of this BillingGroup.

        Primary pay method number  # noqa: E501

        :param primary_pay_method: The primary_pay_method of this BillingGroup.  # noqa: E501
        :type: int
        """

        self._primary_pay_method = primary_pay_method

    @property
    def primary_pay_method_name(self):
        """Gets the primary_pay_method_name of this BillingGroup.  # noqa: E501

        Primary pay method name  # noqa: E501

        :return: The primary_pay_method_name of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._primary_pay_method_name

    @primary_pay_method_name.setter
    def primary_pay_method_name(self, primary_pay_method_name):
        """Sets the primary_pay_method_name of this BillingGroup.

        Primary pay method name  # noqa: E501

        :param primary_pay_method_name: The primary_pay_method_name of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._primary_pay_method_name = primary_pay_method_name

    @property
    def secondary_pay_method(self):
        """Gets the secondary_pay_method of this BillingGroup.  # noqa: E501

        Secondary pay method number  # noqa: E501

        :return: The secondary_pay_method of this BillingGroup.  # noqa: E501
        :rtype: int
        """
        return self._secondary_pay_method

    @secondary_pay_method.setter
    def secondary_pay_method(self, secondary_pay_method):
        """Sets the secondary_pay_method of this BillingGroup.

        Secondary pay method number  # noqa: E501

        :param secondary_pay_method: The secondary_pay_method of this BillingGroup.  # noqa: E501
        :type: int
        """

        self._secondary_pay_method = secondary_pay_method

    @property
    def secondary_pay_method_name(self):
        """Gets the secondary_pay_method_name of this BillingGroup.  # noqa: E501

        Secondary pay method name  # noqa: E501

        :return: The secondary_pay_method_name of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._secondary_pay_method_name

    @secondary_pay_method_name.setter
    def secondary_pay_method_name(self, secondary_pay_method_name):
        """Sets the secondary_pay_method_name of this BillingGroup.

        Secondary pay method name  # noqa: E501

        :param secondary_pay_method_name: The secondary_pay_method_name of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._secondary_pay_method_name = secondary_pay_method_name

    @property
    def stmt_email_list_cc(self):
        """Gets the stmt_email_list_cc of this BillingGroup.  # noqa: E501

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :return: The stmt_email_list_cc of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._stmt_email_list_cc

    @stmt_email_list_cc.setter
    def stmt_email_list_cc(self, stmt_email_list_cc):
        """Sets the stmt_email_list_cc of this BillingGroup.

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :param stmt_email_list_cc: The stmt_email_list_cc of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._stmt_email_list_cc = stmt_email_list_cc

    @property
    def stmt_email_list_bcc(self):
        """Gets the stmt_email_list_bcc of this BillingGroup.  # noqa: E501

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :return: The stmt_email_list_bcc of this BillingGroup.  # noqa: E501
        :rtype: str
        """
        return self._stmt_email_list_bcc

    @stmt_email_list_bcc.setter
    def stmt_email_list_bcc(self, stmt_email_list_bcc):
        """Sets the stmt_email_list_bcc of this BillingGroup.

        Array containing the list of additional cc and bcc email addresses.  # noqa: E501

        :param stmt_email_list_bcc: The stmt_email_list_bcc of this BillingGroup.  # noqa: E501
        :type: str
        """

        self._stmt_email_list_bcc = stmt_email_list_bcc

    @property
    def collection_group_bg_info(self):
        """Gets the collection_group_bg_info of this BillingGroup.  # noqa: E501

        Array for collection groups for billing group  # noqa: E501

        :return: The collection_group_bg_info of this BillingGroup.  # noqa: E501
        :rtype: list[CollectionGroupBgInfo]
        """
        return self._collection_group_bg_info

    @collection_group_bg_info.setter
    def collection_group_bg_info(self, collection_group_bg_info):
        """Sets the collection_group_bg_info of this BillingGroup.

        Array for collection groups for billing group  # noqa: E501

        :param collection_group_bg_info: The collection_group_bg_info of this BillingGroup.  # noqa: E501
        :type: list[CollectionGroupBgInfo]
        """

        self._collection_group_bg_info = collection_group_bg_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
